// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace TransCatSerial {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class BusList;
struct BusListDefaultTypeInternal;
extern BusListDefaultTypeInternal _BusList_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DistanceToStop;
struct DistanceToStopDefaultTypeInternal;
extern DistanceToStopDefaultTypeInternal _DistanceToStop_default_instance_;
class EdgeDescriptor;
struct EdgeDescriptorDefaultTypeInternal;
extern EdgeDescriptorDefaultTypeInternal _EdgeDescriptor_default_instance_;
class EdgeToDesc;
struct EdgeToDescDefaultTypeInternal;
extern EdgeToDescDefaultTypeInternal _EdgeToDesc_default_instance_;
class EdgeToDescList;
struct EdgeToDescListDefaultTypeInternal;
extern EdgeToDescListDefaultTypeInternal _EdgeToDescList_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopList;
struct StopListDefaultTypeInternal;
extern StopListDefaultTypeInternal _StopList_default_instance_;
class StopNameToVertex;
struct StopNameToVertexDefaultTypeInternal;
extern StopNameToVertexDefaultTypeInternal _StopNameToVertex_default_instance_;
class StopNameToVertexList;
struct StopNameToVertexListDefaultTypeInternal;
extern StopNameToVertexListDefaultTypeInternal _StopNameToVertexList_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace TransCatSerial
PROTOBUF_NAMESPACE_OPEN
template<> ::TransCatSerial::Bus* Arena::CreateMaybeMessage<::TransCatSerial::Bus>(Arena*);
template<> ::TransCatSerial::BusList* Arena::CreateMaybeMessage<::TransCatSerial::BusList>(Arena*);
template<> ::TransCatSerial::Coordinates* Arena::CreateMaybeMessage<::TransCatSerial::Coordinates>(Arena*);
template<> ::TransCatSerial::DistanceToStop* Arena::CreateMaybeMessage<::TransCatSerial::DistanceToStop>(Arena*);
template<> ::TransCatSerial::EdgeDescriptor* Arena::CreateMaybeMessage<::TransCatSerial::EdgeDescriptor>(Arena*);
template<> ::TransCatSerial::EdgeToDesc* Arena::CreateMaybeMessage<::TransCatSerial::EdgeToDesc>(Arena*);
template<> ::TransCatSerial::EdgeToDescList* Arena::CreateMaybeMessage<::TransCatSerial::EdgeToDescList>(Arena*);
template<> ::TransCatSerial::Stop* Arena::CreateMaybeMessage<::TransCatSerial::Stop>(Arena*);
template<> ::TransCatSerial::StopList* Arena::CreateMaybeMessage<::TransCatSerial::StopList>(Arena*);
template<> ::TransCatSerial::StopNameToVertex* Arena::CreateMaybeMessage<::TransCatSerial::StopNameToVertex>(Arena*);
template<> ::TransCatSerial::StopNameToVertexList* Arena::CreateMaybeMessage<::TransCatSerial::StopNameToVertexList>(Arena*);
template<> ::TransCatSerial::TransportCatalogue* Arena::CreateMaybeMessage<::TransCatSerial::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TransCatSerial {

enum EdgeDescriptor_EdgeType : int {
  EdgeDescriptor_EdgeType_EDGE_UNKNOWN = 0,
  EdgeDescriptor_EdgeType_EDGE_STAGE = 1,
  EdgeDescriptor_EdgeType_EDGE_TRANSFER = 2,
  EdgeDescriptor_EdgeType_EdgeDescriptor_EdgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EdgeDescriptor_EdgeType_EdgeDescriptor_EdgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EdgeDescriptor_EdgeType_IsValid(int value);
constexpr EdgeDescriptor_EdgeType EdgeDescriptor_EdgeType_EdgeType_MIN = EdgeDescriptor_EdgeType_EDGE_UNKNOWN;
constexpr EdgeDescriptor_EdgeType EdgeDescriptor_EdgeType_EdgeType_MAX = EdgeDescriptor_EdgeType_EDGE_TRANSFER;
constexpr int EdgeDescriptor_EdgeType_EdgeType_ARRAYSIZE = EdgeDescriptor_EdgeType_EdgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdgeDescriptor_EdgeType_descriptor();
template<typename T>
inline const std::string& EdgeDescriptor_EdgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EdgeDescriptor_EdgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EdgeDescriptor_EdgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EdgeDescriptor_EdgeType_descriptor(), enum_t_value);
}
inline bool EdgeDescriptor_EdgeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EdgeDescriptor_EdgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EdgeDescriptor_EdgeType>(
    EdgeDescriptor_EdgeType_descriptor(), name, value);
}
enum Stop_StopType : int {
  Stop_StopType_STOPTYPE_UNDEFINED = 0,
  Stop_StopType_STOPTYPE_ORDINAR = 1,
  Stop_StopType_Stop_StopType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Stop_StopType_Stop_StopType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Stop_StopType_IsValid(int value);
constexpr Stop_StopType Stop_StopType_StopType_MIN = Stop_StopType_STOPTYPE_UNDEFINED;
constexpr Stop_StopType Stop_StopType_StopType_MAX = Stop_StopType_STOPTYPE_ORDINAR;
constexpr int Stop_StopType_StopType_ARRAYSIZE = Stop_StopType_StopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stop_StopType_descriptor();
template<typename T>
inline const std::string& Stop_StopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Stop_StopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Stop_StopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Stop_StopType_descriptor(), enum_t_value);
}
inline bool Stop_StopType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Stop_StopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Stop_StopType>(
    Stop_StopType_descriptor(), name, value);
}
enum Bus_BusType : int {
  Bus_BusType_BUSTYPE_UNDEFINED = 0,
  Bus_BusType_BUSTYPE_ORDINAR = 1,
  Bus_BusType_BUSTYPE_CIRCULAR = 2,
  Bus_BusType_Bus_BusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Bus_BusType_Bus_BusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Bus_BusType_IsValid(int value);
constexpr Bus_BusType Bus_BusType_BusType_MIN = Bus_BusType_BUSTYPE_UNDEFINED;
constexpr Bus_BusType Bus_BusType_BusType_MAX = Bus_BusType_BUSTYPE_CIRCULAR;
constexpr int Bus_BusType_BusType_ARRAYSIZE = Bus_BusType_BusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bus_BusType_descriptor();
template<typename T>
inline const std::string& Bus_BusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bus_BusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bus_BusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bus_BusType_descriptor(), enum_t_value);
}
inline bool Bus_BusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bus_BusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bus_BusType>(
    Bus_BusType_descriptor(), name, value);
}
// ===================================================================

class StopNameToVertex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.StopNameToVertex) */ {
 public:
  inline StopNameToVertex() : StopNameToVertex(nullptr) {}
  ~StopNameToVertex() override;
  explicit constexpr StopNameToVertex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopNameToVertex(const StopNameToVertex& from);
  StopNameToVertex(StopNameToVertex&& from) noexcept
    : StopNameToVertex() {
    *this = ::std::move(from);
  }

  inline StopNameToVertex& operator=(const StopNameToVertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopNameToVertex& operator=(StopNameToVertex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopNameToVertex& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopNameToVertex* internal_default_instance() {
    return reinterpret_cast<const StopNameToVertex*>(
               &_StopNameToVertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopNameToVertex& a, StopNameToVertex& b) {
    a.Swap(&b);
  }
  inline void Swap(StopNameToVertex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopNameToVertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopNameToVertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopNameToVertex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopNameToVertex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopNameToVertex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopNameToVertex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.StopNameToVertex";
  }
  protected:
  explicit StopNameToVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameNumFieldNumber = 1,
    kVertexIdFieldNumber = 2,
  };
  // uint32 stop_name_num = 1;
  void clear_stop_name_num();
  uint32_t stop_name_num() const;
  void set_stop_name_num(uint32_t value);
  private:
  uint32_t _internal_stop_name_num() const;
  void _internal_set_stop_name_num(uint32_t value);
  public:

  // uint32 vertex_id = 2;
  void clear_vertex_id();
  uint32_t vertex_id() const;
  void set_vertex_id(uint32_t value);
  private:
  uint32_t _internal_vertex_id() const;
  void _internal_set_vertex_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.StopNameToVertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t stop_name_num_;
  uint32_t vertex_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopNameToVertexList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.StopNameToVertexList) */ {
 public:
  inline StopNameToVertexList() : StopNameToVertexList(nullptr) {}
  ~StopNameToVertexList() override;
  explicit constexpr StopNameToVertexList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopNameToVertexList(const StopNameToVertexList& from);
  StopNameToVertexList(StopNameToVertexList&& from) noexcept
    : StopNameToVertexList() {
    *this = ::std::move(from);
  }

  inline StopNameToVertexList& operator=(const StopNameToVertexList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopNameToVertexList& operator=(StopNameToVertexList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopNameToVertexList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopNameToVertexList* internal_default_instance() {
    return reinterpret_cast<const StopNameToVertexList*>(
               &_StopNameToVertexList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopNameToVertexList& a, StopNameToVertexList& b) {
    a.Swap(&b);
  }
  inline void Swap(StopNameToVertexList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopNameToVertexList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopNameToVertexList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopNameToVertexList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopNameToVertexList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopNameToVertexList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopNameToVertexList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.StopNameToVertexList";
  }
  protected:
  explicit StopNameToVertexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameToVertexFieldNumber = 1,
  };
  // repeated .TransCatSerial.StopNameToVertex stop_name_to_vertex = 1;
  int stop_name_to_vertex_size() const;
  private:
  int _internal_stop_name_to_vertex_size() const;
  public:
  void clear_stop_name_to_vertex();
  ::TransCatSerial::StopNameToVertex* mutable_stop_name_to_vertex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::StopNameToVertex >*
      mutable_stop_name_to_vertex();
  private:
  const ::TransCatSerial::StopNameToVertex& _internal_stop_name_to_vertex(int index) const;
  ::TransCatSerial::StopNameToVertex* _internal_add_stop_name_to_vertex();
  public:
  const ::TransCatSerial::StopNameToVertex& stop_name_to_vertex(int index) const;
  ::TransCatSerial::StopNameToVertex* add_stop_name_to_vertex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::StopNameToVertex >&
      stop_name_to_vertex() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.StopNameToVertexList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::StopNameToVertex > stop_name_to_vertex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class EdgeDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.EdgeDescriptor) */ {
 public:
  inline EdgeDescriptor() : EdgeDescriptor(nullptr) {}
  ~EdgeDescriptor() override;
  explicit constexpr EdgeDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeDescriptor(const EdgeDescriptor& from);
  EdgeDescriptor(EdgeDescriptor&& from) noexcept
    : EdgeDescriptor() {
    *this = ::std::move(from);
  }

  inline EdgeDescriptor& operator=(const EdgeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeDescriptor& operator=(EdgeDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeDescriptor* internal_default_instance() {
    return reinterpret_cast<const EdgeDescriptor*>(
               &_EdgeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EdgeDescriptor& a, EdgeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgeDescriptor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.EdgeDescriptor";
  }
  protected:
  explicit EdgeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EdgeDescriptor_EdgeType EdgeType;
  static constexpr EdgeType EDGE_UNKNOWN =
    EdgeDescriptor_EdgeType_EDGE_UNKNOWN;
  static constexpr EdgeType EDGE_STAGE =
    EdgeDescriptor_EdgeType_EDGE_STAGE;
  static constexpr EdgeType EDGE_TRANSFER =
    EdgeDescriptor_EdgeType_EDGE_TRANSFER;
  static inline bool EdgeType_IsValid(int value) {
    return EdgeDescriptor_EdgeType_IsValid(value);
  }
  static constexpr EdgeType EdgeType_MIN =
    EdgeDescriptor_EdgeType_EdgeType_MIN;
  static constexpr EdgeType EdgeType_MAX =
    EdgeDescriptor_EdgeType_EdgeType_MAX;
  static constexpr int EdgeType_ARRAYSIZE =
    EdgeDescriptor_EdgeType_EdgeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EdgeType_descriptor() {
    return EdgeDescriptor_EdgeType_descriptor();
  }
  template<typename T>
  static inline const std::string& EdgeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EdgeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EdgeType_Name.");
    return EdgeDescriptor_EdgeType_Name(enum_t_value);
  }
  static inline bool EdgeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EdgeType* value) {
    return EdgeDescriptor_EdgeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeTypeFieldNumber = 1,
    kFromStopNumFieldNumber = 2,
    kToStopNumFieldNumber = 3,
    kBusNameNumFieldNumber = 4,
    kTimeLengthFieldNumber = 6,
    kSpanCountFieldNumber = 5,
  };
  // .TransCatSerial.EdgeDescriptor.EdgeType edge_type = 1;
  void clear_edge_type();
  ::TransCatSerial::EdgeDescriptor_EdgeType edge_type() const;
  void set_edge_type(::TransCatSerial::EdgeDescriptor_EdgeType value);
  private:
  ::TransCatSerial::EdgeDescriptor_EdgeType _internal_edge_type() const;
  void _internal_set_edge_type(::TransCatSerial::EdgeDescriptor_EdgeType value);
  public:

  // uint32 from_stop_num = 2;
  void clear_from_stop_num();
  uint32_t from_stop_num() const;
  void set_from_stop_num(uint32_t value);
  private:
  uint32_t _internal_from_stop_num() const;
  void _internal_set_from_stop_num(uint32_t value);
  public:

  // uint32 to_stop_num = 3;
  void clear_to_stop_num();
  uint32_t to_stop_num() const;
  void set_to_stop_num(uint32_t value);
  private:
  uint32_t _internal_to_stop_num() const;
  void _internal_set_to_stop_num(uint32_t value);
  public:

  // uint32 bus_name_num = 4;
  void clear_bus_name_num();
  uint32_t bus_name_num() const;
  void set_bus_name_num(uint32_t value);
  private:
  uint32_t _internal_bus_name_num() const;
  void _internal_set_bus_name_num(uint32_t value);
  public:

  // double time_length = 6;
  void clear_time_length();
  double time_length() const;
  void set_time_length(double value);
  private:
  double _internal_time_length() const;
  void _internal_set_time_length(double value);
  public:

  // uint32 span_count = 5;
  void clear_span_count();
  uint32_t span_count() const;
  void set_span_count(uint32_t value);
  private:
  uint32_t _internal_span_count() const;
  void _internal_set_span_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.EdgeDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int edge_type_;
  uint32_t from_stop_num_;
  uint32_t to_stop_num_;
  uint32_t bus_name_num_;
  double time_length_;
  uint32_t span_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class EdgeToDesc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.EdgeToDesc) */ {
 public:
  inline EdgeToDesc() : EdgeToDesc(nullptr) {}
  ~EdgeToDesc() override;
  explicit constexpr EdgeToDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeToDesc(const EdgeToDesc& from);
  EdgeToDesc(EdgeToDesc&& from) noexcept
    : EdgeToDesc() {
    *this = ::std::move(from);
  }

  inline EdgeToDesc& operator=(const EdgeToDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeToDesc& operator=(EdgeToDesc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeToDesc& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeToDesc* internal_default_instance() {
    return reinterpret_cast<const EdgeToDesc*>(
               &_EdgeToDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EdgeToDesc& a, EdgeToDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeToDesc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeToDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeToDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeToDesc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeToDesc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgeToDesc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeToDesc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.EdgeToDesc";
  }
  protected:
  explicit EdgeToDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeDescriptorFieldNumber = 2,
    kEdgeIdFieldNumber = 1,
  };
  // .TransCatSerial.EdgeDescriptor edge_descriptor = 2;
  bool has_edge_descriptor() const;
  private:
  bool _internal_has_edge_descriptor() const;
  public:
  void clear_edge_descriptor();
  const ::TransCatSerial::EdgeDescriptor& edge_descriptor() const;
  PROTOBUF_NODISCARD ::TransCatSerial::EdgeDescriptor* release_edge_descriptor();
  ::TransCatSerial::EdgeDescriptor* mutable_edge_descriptor();
  void set_allocated_edge_descriptor(::TransCatSerial::EdgeDescriptor* edge_descriptor);
  private:
  const ::TransCatSerial::EdgeDescriptor& _internal_edge_descriptor() const;
  ::TransCatSerial::EdgeDescriptor* _internal_mutable_edge_descriptor();
  public:
  void unsafe_arena_set_allocated_edge_descriptor(
      ::TransCatSerial::EdgeDescriptor* edge_descriptor);
  ::TransCatSerial::EdgeDescriptor* unsafe_arena_release_edge_descriptor();

  // uint32 edge_id = 1;
  void clear_edge_id();
  uint32_t edge_id() const;
  void set_edge_id(uint32_t value);
  private:
  uint32_t _internal_edge_id() const;
  void _internal_set_edge_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.EdgeToDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TransCatSerial::EdgeDescriptor* edge_descriptor_;
  uint32_t edge_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class EdgeToDescList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.EdgeToDescList) */ {
 public:
  inline EdgeToDescList() : EdgeToDescList(nullptr) {}
  ~EdgeToDescList() override;
  explicit constexpr EdgeToDescList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeToDescList(const EdgeToDescList& from);
  EdgeToDescList(EdgeToDescList&& from) noexcept
    : EdgeToDescList() {
    *this = ::std::move(from);
  }

  inline EdgeToDescList& operator=(const EdgeToDescList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeToDescList& operator=(EdgeToDescList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeToDescList& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeToDescList* internal_default_instance() {
    return reinterpret_cast<const EdgeToDescList*>(
               &_EdgeToDescList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdgeToDescList& a, EdgeToDescList& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeToDescList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeToDescList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeToDescList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeToDescList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeToDescList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgeToDescList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeToDescList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.EdgeToDescList";
  }
  protected:
  explicit EdgeToDescList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeToDescFieldNumber = 1,
  };
  // repeated .TransCatSerial.EdgeToDesc edge_to_desc = 1;
  int edge_to_desc_size() const;
  private:
  int _internal_edge_to_desc_size() const;
  public:
  void clear_edge_to_desc();
  ::TransCatSerial::EdgeToDesc* mutable_edge_to_desc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::EdgeToDesc >*
      mutable_edge_to_desc();
  private:
  const ::TransCatSerial::EdgeToDesc& _internal_edge_to_desc(int index) const;
  ::TransCatSerial::EdgeToDesc* _internal_add_edge_to_desc();
  public:
  const ::TransCatSerial::EdgeToDesc& edge_to_desc(int index) const;
  ::TransCatSerial::EdgeToDesc* add_edge_to_desc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::EdgeToDesc >&
      edge_to_desc() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.EdgeToDescList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::EdgeToDesc > edge_to_desc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit constexpr Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coordinates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class DistanceToStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.DistanceToStop) */ {
 public:
  inline DistanceToStop() : DistanceToStop(nullptr) {}
  ~DistanceToStop() override;
  explicit constexpr DistanceToStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceToStop(const DistanceToStop& from);
  DistanceToStop(DistanceToStop&& from) noexcept
    : DistanceToStop() {
    *this = ::std::move(from);
  }

  inline DistanceToStop& operator=(const DistanceToStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceToStop& operator=(DistanceToStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceToStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceToStop* internal_default_instance() {
    return reinterpret_cast<const DistanceToStop*>(
               &_DistanceToStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DistanceToStop& a, DistanceToStop& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceToStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceToStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceToStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceToStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceToStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistanceToStop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceToStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.DistanceToStop";
  }
  protected:
  explicit DistanceToStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 2,
    kStopNumFieldNumber = 1,
  };
  // double distance = 2;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // uint32 stop_num = 1;
  void clear_stop_num();
  uint32_t stop_num() const;
  void set_stop_num(uint32_t value);
  private:
  uint32_t _internal_stop_num() const;
  void _internal_set_stop_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.DistanceToStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double distance_;
  uint32_t stop_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit constexpr Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Stop_StopType StopType;
  static constexpr StopType STOPTYPE_UNDEFINED =
    Stop_StopType_STOPTYPE_UNDEFINED;
  static constexpr StopType STOPTYPE_ORDINAR =
    Stop_StopType_STOPTYPE_ORDINAR;
  static inline bool StopType_IsValid(int value) {
    return Stop_StopType_IsValid(value);
  }
  static constexpr StopType StopType_MIN =
    Stop_StopType_StopType_MIN;
  static constexpr StopType StopType_MAX =
    Stop_StopType_StopType_MAX;
  static constexpr int StopType_ARRAYSIZE =
    Stop_StopType_StopType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StopType_descriptor() {
    return Stop_StopType_descriptor();
  }
  template<typename T>
  static inline const std::string& StopType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StopType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StopType_Name.");
    return Stop_StopType_Name(enum_t_value);
  }
  static inline bool StopType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StopType* value) {
    return Stop_StopType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBusesAtStopFieldNumber = 4,
    kDistanceToStopFieldNumber = 5,
    kStopNameFieldNumber = 2,
    kStopCoordsFieldNumber = 3,
    kStopTypeFieldNumber = 1,
  };
  // repeated uint32 buses_at_stop = 4;
  int buses_at_stop_size() const;
  private:
  int _internal_buses_at_stop_size() const;
  public:
  void clear_buses_at_stop();
  private:
  uint32_t _internal_buses_at_stop(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_buses_at_stop() const;
  void _internal_add_buses_at_stop(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_buses_at_stop();
  public:
  uint32_t buses_at_stop(int index) const;
  void set_buses_at_stop(int index, uint32_t value);
  void add_buses_at_stop(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      buses_at_stop() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_buses_at_stop();

  // repeated .TransCatSerial.DistanceToStop distance_to_stop = 5;
  int distance_to_stop_size() const;
  private:
  int _internal_distance_to_stop_size() const;
  public:
  void clear_distance_to_stop();
  ::TransCatSerial::DistanceToStop* mutable_distance_to_stop(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::DistanceToStop >*
      mutable_distance_to_stop();
  private:
  const ::TransCatSerial::DistanceToStop& _internal_distance_to_stop(int index) const;
  ::TransCatSerial::DistanceToStop* _internal_add_distance_to_stop();
  public:
  const ::TransCatSerial::DistanceToStop& distance_to_stop(int index) const;
  ::TransCatSerial::DistanceToStop* add_distance_to_stop();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::DistanceToStop >&
      distance_to_stop() const;

  // bytes stop_name = 2;
  void clear_stop_name();
  const std::string& stop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_name();
  PROTOBUF_NODISCARD std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // .TransCatSerial.Coordinates stop_coords = 3;
  bool has_stop_coords() const;
  private:
  bool _internal_has_stop_coords() const;
  public:
  void clear_stop_coords();
  const ::TransCatSerial::Coordinates& stop_coords() const;
  PROTOBUF_NODISCARD ::TransCatSerial::Coordinates* release_stop_coords();
  ::TransCatSerial::Coordinates* mutable_stop_coords();
  void set_allocated_stop_coords(::TransCatSerial::Coordinates* stop_coords);
  private:
  const ::TransCatSerial::Coordinates& _internal_stop_coords() const;
  ::TransCatSerial::Coordinates* _internal_mutable_stop_coords();
  public:
  void unsafe_arena_set_allocated_stop_coords(
      ::TransCatSerial::Coordinates* stop_coords);
  ::TransCatSerial::Coordinates* unsafe_arena_release_stop_coords();

  // .TransCatSerial.Stop.StopType stop_type = 1;
  void clear_stop_type();
  ::TransCatSerial::Stop_StopType stop_type() const;
  void set_stop_type(::TransCatSerial::Stop_StopType value);
  private:
  ::TransCatSerial::Stop_StopType _internal_stop_type() const;
  void _internal_set_stop_type(::TransCatSerial::Stop_StopType value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > buses_at_stop_;
  mutable std::atomic<int> _buses_at_stop_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::DistanceToStop > distance_to_stop_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
  ::TransCatSerial::Coordinates* stop_coords_;
  int stop_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit constexpr Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Bus_BusType BusType;
  static constexpr BusType BUSTYPE_UNDEFINED =
    Bus_BusType_BUSTYPE_UNDEFINED;
  static constexpr BusType BUSTYPE_ORDINAR =
    Bus_BusType_BUSTYPE_ORDINAR;
  static constexpr BusType BUSTYPE_CIRCULAR =
    Bus_BusType_BUSTYPE_CIRCULAR;
  static inline bool BusType_IsValid(int value) {
    return Bus_BusType_IsValid(value);
  }
  static constexpr BusType BusType_MIN =
    Bus_BusType_BusType_MIN;
  static constexpr BusType BusType_MAX =
    Bus_BusType_BusType_MAX;
  static constexpr int BusType_ARRAYSIZE =
    Bus_BusType_BusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BusType_descriptor() {
    return Bus_BusType_descriptor();
  }
  template<typename T>
  static inline const std::string& BusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BusType_Name.");
    return Bus_BusType_Name(enum_t_value);
  }
  static inline bool BusType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BusType* value) {
    return Bus_BusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBusStopsFieldNumber = 3,
    kBusNameFieldNumber = 2,
    kBusTypeFieldNumber = 1,
  };
  // repeated uint32 bus_stops = 3;
  int bus_stops_size() const;
  private:
  int _internal_bus_stops_size() const;
  public:
  void clear_bus_stops();
  private:
  uint32_t _internal_bus_stops(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_bus_stops() const;
  void _internal_add_bus_stops(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_bus_stops();
  public:
  uint32_t bus_stops(int index) const;
  void set_bus_stops(int index, uint32_t value);
  void add_bus_stops(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      bus_stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_bus_stops();

  // bytes bus_name = 2;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // .TransCatSerial.Bus.BusType bus_type = 1;
  void clear_bus_type();
  ::TransCatSerial::Bus_BusType bus_type() const;
  void set_bus_type(::TransCatSerial::Bus_BusType value);
  private:
  ::TransCatSerial::Bus_BusType _internal_bus_type() const;
  void _internal_set_bus_type(::TransCatSerial::Bus_BusType value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > bus_stops_;
  mutable std::atomic<int> _bus_stops_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
  int bus_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.StopList) */ {
 public:
  inline StopList() : StopList(nullptr) {}
  ~StopList() override;
  explicit constexpr StopList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopList(const StopList& from);
  StopList(StopList&& from) noexcept
    : StopList() {
    *this = ::std::move(from);
  }

  inline StopList& operator=(const StopList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopList& operator=(StopList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopList* internal_default_instance() {
    return reinterpret_cast<const StopList*>(
               &_StopList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopList& a, StopList& b) {
    a.Swap(&b);
  }
  inline void Swap(StopList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.StopList";
  }
  protected:
  explicit StopList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
  };
  // repeated .TransCatSerial.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::TransCatSerial::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Stop >*
      mutable_stops();
  private:
  const ::TransCatSerial::Stop& _internal_stops(int index) const;
  ::TransCatSerial::Stop* _internal_add_stops();
  public:
  const ::TransCatSerial::Stop& stops(int index) const;
  ::TransCatSerial::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Stop >&
      stops() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.StopList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Stop > stops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class BusList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.BusList) */ {
 public:
  inline BusList() : BusList(nullptr) {}
  ~BusList() override;
  explicit constexpr BusList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusList(const BusList& from);
  BusList(BusList&& from) noexcept
    : BusList() {
    *this = ::std::move(from);
  }

  inline BusList& operator=(const BusList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusList& operator=(BusList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusList* internal_default_instance() {
    return reinterpret_cast<const BusList*>(
               &_BusList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BusList& a, BusList& b) {
    a.Swap(&b);
  }
  inline void Swap(BusList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.BusList";
  }
  protected:
  explicit BusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 2,
  };
  // repeated .TransCatSerial.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::TransCatSerial::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Bus >*
      mutable_buses();
  private:
  const ::TransCatSerial::Bus& _internal_buses(int index) const;
  ::TransCatSerial::Bus* _internal_add_buses();
  public:
  const ::TransCatSerial::Bus& buses(int index) const;
  ::TransCatSerial::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Bus >&
      buses() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.BusList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Bus > buses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit constexpr TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportCatalogue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kRouterContextFieldNumber = 3,
    kRenderContextFieldNumber = 4,
    kStopNameToEnterVertexFieldNumber = 6,
    kStopNameToExitVertexFieldNumber = 7,
    kEdgeToDescFieldNumber = 8,
    kEdgesFieldNumber = 9,
    kIncidenceListsFieldNumber = 10,
    kRoutesDataFieldNumber = 11,
    kIsRoutesDataFieldNumber = 5,
  };
  // .TransCatSerial.StopList stops = 1;
  bool has_stops() const;
  private:
  bool _internal_has_stops() const;
  public:
  void clear_stops();
  const ::TransCatSerial::StopList& stops() const;
  PROTOBUF_NODISCARD ::TransCatSerial::StopList* release_stops();
  ::TransCatSerial::StopList* mutable_stops();
  void set_allocated_stops(::TransCatSerial::StopList* stops);
  private:
  const ::TransCatSerial::StopList& _internal_stops() const;
  ::TransCatSerial::StopList* _internal_mutable_stops();
  public:
  void unsafe_arena_set_allocated_stops(
      ::TransCatSerial::StopList* stops);
  ::TransCatSerial::StopList* unsafe_arena_release_stops();

  // .TransCatSerial.BusList buses = 2;
  bool has_buses() const;
  private:
  bool _internal_has_buses() const;
  public:
  void clear_buses();
  const ::TransCatSerial::BusList& buses() const;
  PROTOBUF_NODISCARD ::TransCatSerial::BusList* release_buses();
  ::TransCatSerial::BusList* mutable_buses();
  void set_allocated_buses(::TransCatSerial::BusList* buses);
  private:
  const ::TransCatSerial::BusList& _internal_buses() const;
  ::TransCatSerial::BusList* _internal_mutable_buses();
  public:
  void unsafe_arena_set_allocated_buses(
      ::TransCatSerial::BusList* buses);
  ::TransCatSerial::BusList* unsafe_arena_release_buses();

  // .TransCatSerial.RouterContext router_context = 3;
  bool has_router_context() const;
  private:
  bool _internal_has_router_context() const;
  public:
  void clear_router_context();
  const ::TransCatSerial::RouterContext& router_context() const;
  PROTOBUF_NODISCARD ::TransCatSerial::RouterContext* release_router_context();
  ::TransCatSerial::RouterContext* mutable_router_context();
  void set_allocated_router_context(::TransCatSerial::RouterContext* router_context);
  private:
  const ::TransCatSerial::RouterContext& _internal_router_context() const;
  ::TransCatSerial::RouterContext* _internal_mutable_router_context();
  public:
  void unsafe_arena_set_allocated_router_context(
      ::TransCatSerial::RouterContext* router_context);
  ::TransCatSerial::RouterContext* unsafe_arena_release_router_context();

  // .TransCatSerial.MapRendererContext render_context = 4;
  bool has_render_context() const;
  private:
  bool _internal_has_render_context() const;
  public:
  void clear_render_context();
  const ::TransCatSerial::MapRendererContext& render_context() const;
  PROTOBUF_NODISCARD ::TransCatSerial::MapRendererContext* release_render_context();
  ::TransCatSerial::MapRendererContext* mutable_render_context();
  void set_allocated_render_context(::TransCatSerial::MapRendererContext* render_context);
  private:
  const ::TransCatSerial::MapRendererContext& _internal_render_context() const;
  ::TransCatSerial::MapRendererContext* _internal_mutable_render_context();
  public:
  void unsafe_arena_set_allocated_render_context(
      ::TransCatSerial::MapRendererContext* render_context);
  ::TransCatSerial::MapRendererContext* unsafe_arena_release_render_context();

  // .TransCatSerial.StopNameToVertexList stop_name_to_enter_vertex = 6;
  bool has_stop_name_to_enter_vertex() const;
  private:
  bool _internal_has_stop_name_to_enter_vertex() const;
  public:
  void clear_stop_name_to_enter_vertex();
  const ::TransCatSerial::StopNameToVertexList& stop_name_to_enter_vertex() const;
  PROTOBUF_NODISCARD ::TransCatSerial::StopNameToVertexList* release_stop_name_to_enter_vertex();
  ::TransCatSerial::StopNameToVertexList* mutable_stop_name_to_enter_vertex();
  void set_allocated_stop_name_to_enter_vertex(::TransCatSerial::StopNameToVertexList* stop_name_to_enter_vertex);
  private:
  const ::TransCatSerial::StopNameToVertexList& _internal_stop_name_to_enter_vertex() const;
  ::TransCatSerial::StopNameToVertexList* _internal_mutable_stop_name_to_enter_vertex();
  public:
  void unsafe_arena_set_allocated_stop_name_to_enter_vertex(
      ::TransCatSerial::StopNameToVertexList* stop_name_to_enter_vertex);
  ::TransCatSerial::StopNameToVertexList* unsafe_arena_release_stop_name_to_enter_vertex();

  // .TransCatSerial.StopNameToVertexList stop_name_to_exit_vertex = 7;
  bool has_stop_name_to_exit_vertex() const;
  private:
  bool _internal_has_stop_name_to_exit_vertex() const;
  public:
  void clear_stop_name_to_exit_vertex();
  const ::TransCatSerial::StopNameToVertexList& stop_name_to_exit_vertex() const;
  PROTOBUF_NODISCARD ::TransCatSerial::StopNameToVertexList* release_stop_name_to_exit_vertex();
  ::TransCatSerial::StopNameToVertexList* mutable_stop_name_to_exit_vertex();
  void set_allocated_stop_name_to_exit_vertex(::TransCatSerial::StopNameToVertexList* stop_name_to_exit_vertex);
  private:
  const ::TransCatSerial::StopNameToVertexList& _internal_stop_name_to_exit_vertex() const;
  ::TransCatSerial::StopNameToVertexList* _internal_mutable_stop_name_to_exit_vertex();
  public:
  void unsafe_arena_set_allocated_stop_name_to_exit_vertex(
      ::TransCatSerial::StopNameToVertexList* stop_name_to_exit_vertex);
  ::TransCatSerial::StopNameToVertexList* unsafe_arena_release_stop_name_to_exit_vertex();

  // .TransCatSerial.EdgeToDescList edge_to_desc = 8;
  bool has_edge_to_desc() const;
  private:
  bool _internal_has_edge_to_desc() const;
  public:
  void clear_edge_to_desc();
  const ::TransCatSerial::EdgeToDescList& edge_to_desc() const;
  PROTOBUF_NODISCARD ::TransCatSerial::EdgeToDescList* release_edge_to_desc();
  ::TransCatSerial::EdgeToDescList* mutable_edge_to_desc();
  void set_allocated_edge_to_desc(::TransCatSerial::EdgeToDescList* edge_to_desc);
  private:
  const ::TransCatSerial::EdgeToDescList& _internal_edge_to_desc() const;
  ::TransCatSerial::EdgeToDescList* _internal_mutable_edge_to_desc();
  public:
  void unsafe_arena_set_allocated_edge_to_desc(
      ::TransCatSerial::EdgeToDescList* edge_to_desc);
  ::TransCatSerial::EdgeToDescList* unsafe_arena_release_edge_to_desc();

  // .TransCatSerial.Edges edges = 9;
  bool has_edges() const;
  private:
  bool _internal_has_edges() const;
  public:
  void clear_edges();
  const ::TransCatSerial::Edges& edges() const;
  PROTOBUF_NODISCARD ::TransCatSerial::Edges* release_edges();
  ::TransCatSerial::Edges* mutable_edges();
  void set_allocated_edges(::TransCatSerial::Edges* edges);
  private:
  const ::TransCatSerial::Edges& _internal_edges() const;
  ::TransCatSerial::Edges* _internal_mutable_edges();
  public:
  void unsafe_arena_set_allocated_edges(
      ::TransCatSerial::Edges* edges);
  ::TransCatSerial::Edges* unsafe_arena_release_edges();

  // .TransCatSerial.IncidenceLists incidence_lists = 10;
  bool has_incidence_lists() const;
  private:
  bool _internal_has_incidence_lists() const;
  public:
  void clear_incidence_lists();
  const ::TransCatSerial::IncidenceLists& incidence_lists() const;
  PROTOBUF_NODISCARD ::TransCatSerial::IncidenceLists* release_incidence_lists();
  ::TransCatSerial::IncidenceLists* mutable_incidence_lists();
  void set_allocated_incidence_lists(::TransCatSerial::IncidenceLists* incidence_lists);
  private:
  const ::TransCatSerial::IncidenceLists& _internal_incidence_lists() const;
  ::TransCatSerial::IncidenceLists* _internal_mutable_incidence_lists();
  public:
  void unsafe_arena_set_allocated_incidence_lists(
      ::TransCatSerial::IncidenceLists* incidence_lists);
  ::TransCatSerial::IncidenceLists* unsafe_arena_release_incidence_lists();

  // .TransCatSerial.RoutesData routes_data = 11;
  bool has_routes_data() const;
  private:
  bool _internal_has_routes_data() const;
  public:
  void clear_routes_data();
  const ::TransCatSerial::RoutesData& routes_data() const;
  PROTOBUF_NODISCARD ::TransCatSerial::RoutesData* release_routes_data();
  ::TransCatSerial::RoutesData* mutable_routes_data();
  void set_allocated_routes_data(::TransCatSerial::RoutesData* routes_data);
  private:
  const ::TransCatSerial::RoutesData& _internal_routes_data() const;
  ::TransCatSerial::RoutesData* _internal_mutable_routes_data();
  public:
  void unsafe_arena_set_allocated_routes_data(
      ::TransCatSerial::RoutesData* routes_data);
  ::TransCatSerial::RoutesData* unsafe_arena_release_routes_data();

  // bool is_routes_data = 5;
  void clear_is_routes_data();
  bool is_routes_data() const;
  void set_is_routes_data(bool value);
  private:
  bool _internal_is_routes_data() const;
  void _internal_set_is_routes_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TransCatSerial::StopList* stops_;
  ::TransCatSerial::BusList* buses_;
  ::TransCatSerial::RouterContext* router_context_;
  ::TransCatSerial::MapRendererContext* render_context_;
  ::TransCatSerial::StopNameToVertexList* stop_name_to_enter_vertex_;
  ::TransCatSerial::StopNameToVertexList* stop_name_to_exit_vertex_;
  ::TransCatSerial::EdgeToDescList* edge_to_desc_;
  ::TransCatSerial::Edges* edges_;
  ::TransCatSerial::IncidenceLists* incidence_lists_;
  ::TransCatSerial::RoutesData* routes_data_;
  bool is_routes_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopNameToVertex

// uint32 stop_name_num = 1;
inline void StopNameToVertex::clear_stop_name_num() {
  stop_name_num_ = 0u;
}
inline uint32_t StopNameToVertex::_internal_stop_name_num() const {
  return stop_name_num_;
}
inline uint32_t StopNameToVertex::stop_name_num() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.StopNameToVertex.stop_name_num)
  return _internal_stop_name_num();
}
inline void StopNameToVertex::_internal_set_stop_name_num(uint32_t value) {
  
  stop_name_num_ = value;
}
inline void StopNameToVertex::set_stop_name_num(uint32_t value) {
  _internal_set_stop_name_num(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.StopNameToVertex.stop_name_num)
}

// uint32 vertex_id = 2;
inline void StopNameToVertex::clear_vertex_id() {
  vertex_id_ = 0u;
}
inline uint32_t StopNameToVertex::_internal_vertex_id() const {
  return vertex_id_;
}
inline uint32_t StopNameToVertex::vertex_id() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.StopNameToVertex.vertex_id)
  return _internal_vertex_id();
}
inline void StopNameToVertex::_internal_set_vertex_id(uint32_t value) {
  
  vertex_id_ = value;
}
inline void StopNameToVertex::set_vertex_id(uint32_t value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.StopNameToVertex.vertex_id)
}

// -------------------------------------------------------------------

// StopNameToVertexList

// repeated .TransCatSerial.StopNameToVertex stop_name_to_vertex = 1;
inline int StopNameToVertexList::_internal_stop_name_to_vertex_size() const {
  return stop_name_to_vertex_.size();
}
inline int StopNameToVertexList::stop_name_to_vertex_size() const {
  return _internal_stop_name_to_vertex_size();
}
inline void StopNameToVertexList::clear_stop_name_to_vertex() {
  stop_name_to_vertex_.Clear();
}
inline ::TransCatSerial::StopNameToVertex* StopNameToVertexList::mutable_stop_name_to_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.StopNameToVertexList.stop_name_to_vertex)
  return stop_name_to_vertex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::StopNameToVertex >*
StopNameToVertexList::mutable_stop_name_to_vertex() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.StopNameToVertexList.stop_name_to_vertex)
  return &stop_name_to_vertex_;
}
inline const ::TransCatSerial::StopNameToVertex& StopNameToVertexList::_internal_stop_name_to_vertex(int index) const {
  return stop_name_to_vertex_.Get(index);
}
inline const ::TransCatSerial::StopNameToVertex& StopNameToVertexList::stop_name_to_vertex(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.StopNameToVertexList.stop_name_to_vertex)
  return _internal_stop_name_to_vertex(index);
}
inline ::TransCatSerial::StopNameToVertex* StopNameToVertexList::_internal_add_stop_name_to_vertex() {
  return stop_name_to_vertex_.Add();
}
inline ::TransCatSerial::StopNameToVertex* StopNameToVertexList::add_stop_name_to_vertex() {
  ::TransCatSerial::StopNameToVertex* _add = _internal_add_stop_name_to_vertex();
  // @@protoc_insertion_point(field_add:TransCatSerial.StopNameToVertexList.stop_name_to_vertex)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::StopNameToVertex >&
StopNameToVertexList::stop_name_to_vertex() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.StopNameToVertexList.stop_name_to_vertex)
  return stop_name_to_vertex_;
}

// -------------------------------------------------------------------

// EdgeDescriptor

// .TransCatSerial.EdgeDescriptor.EdgeType edge_type = 1;
inline void EdgeDescriptor::clear_edge_type() {
  edge_type_ = 0;
}
inline ::TransCatSerial::EdgeDescriptor_EdgeType EdgeDescriptor::_internal_edge_type() const {
  return static_cast< ::TransCatSerial::EdgeDescriptor_EdgeType >(edge_type_);
}
inline ::TransCatSerial::EdgeDescriptor_EdgeType EdgeDescriptor::edge_type() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeDescriptor.edge_type)
  return _internal_edge_type();
}
inline void EdgeDescriptor::_internal_set_edge_type(::TransCatSerial::EdgeDescriptor_EdgeType value) {
  
  edge_type_ = value;
}
inline void EdgeDescriptor::set_edge_type(::TransCatSerial::EdgeDescriptor_EdgeType value) {
  _internal_set_edge_type(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeDescriptor.edge_type)
}

// uint32 from_stop_num = 2;
inline void EdgeDescriptor::clear_from_stop_num() {
  from_stop_num_ = 0u;
}
inline uint32_t EdgeDescriptor::_internal_from_stop_num() const {
  return from_stop_num_;
}
inline uint32_t EdgeDescriptor::from_stop_num() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeDescriptor.from_stop_num)
  return _internal_from_stop_num();
}
inline void EdgeDescriptor::_internal_set_from_stop_num(uint32_t value) {
  
  from_stop_num_ = value;
}
inline void EdgeDescriptor::set_from_stop_num(uint32_t value) {
  _internal_set_from_stop_num(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeDescriptor.from_stop_num)
}

// uint32 to_stop_num = 3;
inline void EdgeDescriptor::clear_to_stop_num() {
  to_stop_num_ = 0u;
}
inline uint32_t EdgeDescriptor::_internal_to_stop_num() const {
  return to_stop_num_;
}
inline uint32_t EdgeDescriptor::to_stop_num() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeDescriptor.to_stop_num)
  return _internal_to_stop_num();
}
inline void EdgeDescriptor::_internal_set_to_stop_num(uint32_t value) {
  
  to_stop_num_ = value;
}
inline void EdgeDescriptor::set_to_stop_num(uint32_t value) {
  _internal_set_to_stop_num(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeDescriptor.to_stop_num)
}

// uint32 bus_name_num = 4;
inline void EdgeDescriptor::clear_bus_name_num() {
  bus_name_num_ = 0u;
}
inline uint32_t EdgeDescriptor::_internal_bus_name_num() const {
  return bus_name_num_;
}
inline uint32_t EdgeDescriptor::bus_name_num() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeDescriptor.bus_name_num)
  return _internal_bus_name_num();
}
inline void EdgeDescriptor::_internal_set_bus_name_num(uint32_t value) {
  
  bus_name_num_ = value;
}
inline void EdgeDescriptor::set_bus_name_num(uint32_t value) {
  _internal_set_bus_name_num(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeDescriptor.bus_name_num)
}

// uint32 span_count = 5;
inline void EdgeDescriptor::clear_span_count() {
  span_count_ = 0u;
}
inline uint32_t EdgeDescriptor::_internal_span_count() const {
  return span_count_;
}
inline uint32_t EdgeDescriptor::span_count() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeDescriptor.span_count)
  return _internal_span_count();
}
inline void EdgeDescriptor::_internal_set_span_count(uint32_t value) {
  
  span_count_ = value;
}
inline void EdgeDescriptor::set_span_count(uint32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeDescriptor.span_count)
}

// double time_length = 6;
inline void EdgeDescriptor::clear_time_length() {
  time_length_ = 0;
}
inline double EdgeDescriptor::_internal_time_length() const {
  return time_length_;
}
inline double EdgeDescriptor::time_length() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeDescriptor.time_length)
  return _internal_time_length();
}
inline void EdgeDescriptor::_internal_set_time_length(double value) {
  
  time_length_ = value;
}
inline void EdgeDescriptor::set_time_length(double value) {
  _internal_set_time_length(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeDescriptor.time_length)
}

// -------------------------------------------------------------------

// EdgeToDesc

// uint32 edge_id = 1;
inline void EdgeToDesc::clear_edge_id() {
  edge_id_ = 0u;
}
inline uint32_t EdgeToDesc::_internal_edge_id() const {
  return edge_id_;
}
inline uint32_t EdgeToDesc::edge_id() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeToDesc.edge_id)
  return _internal_edge_id();
}
inline void EdgeToDesc::_internal_set_edge_id(uint32_t value) {
  
  edge_id_ = value;
}
inline void EdgeToDesc::set_edge_id(uint32_t value) {
  _internal_set_edge_id(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.EdgeToDesc.edge_id)
}

// .TransCatSerial.EdgeDescriptor edge_descriptor = 2;
inline bool EdgeToDesc::_internal_has_edge_descriptor() const {
  return this != internal_default_instance() && edge_descriptor_ != nullptr;
}
inline bool EdgeToDesc::has_edge_descriptor() const {
  return _internal_has_edge_descriptor();
}
inline void EdgeToDesc::clear_edge_descriptor() {
  if (GetArenaForAllocation() == nullptr && edge_descriptor_ != nullptr) {
    delete edge_descriptor_;
  }
  edge_descriptor_ = nullptr;
}
inline const ::TransCatSerial::EdgeDescriptor& EdgeToDesc::_internal_edge_descriptor() const {
  const ::TransCatSerial::EdgeDescriptor* p = edge_descriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::EdgeDescriptor&>(
      ::TransCatSerial::_EdgeDescriptor_default_instance_);
}
inline const ::TransCatSerial::EdgeDescriptor& EdgeToDesc::edge_descriptor() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeToDesc.edge_descriptor)
  return _internal_edge_descriptor();
}
inline void EdgeToDesc::unsafe_arena_set_allocated_edge_descriptor(
    ::TransCatSerial::EdgeDescriptor* edge_descriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_descriptor_);
  }
  edge_descriptor_ = edge_descriptor;
  if (edge_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.EdgeToDesc.edge_descriptor)
}
inline ::TransCatSerial::EdgeDescriptor* EdgeToDesc::release_edge_descriptor() {
  
  ::TransCatSerial::EdgeDescriptor* temp = edge_descriptor_;
  edge_descriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::EdgeDescriptor* EdgeToDesc::unsafe_arena_release_edge_descriptor() {
  // @@protoc_insertion_point(field_release:TransCatSerial.EdgeToDesc.edge_descriptor)
  
  ::TransCatSerial::EdgeDescriptor* temp = edge_descriptor_;
  edge_descriptor_ = nullptr;
  return temp;
}
inline ::TransCatSerial::EdgeDescriptor* EdgeToDesc::_internal_mutable_edge_descriptor() {
  
  if (edge_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::EdgeDescriptor>(GetArenaForAllocation());
    edge_descriptor_ = p;
  }
  return edge_descriptor_;
}
inline ::TransCatSerial::EdgeDescriptor* EdgeToDesc::mutable_edge_descriptor() {
  ::TransCatSerial::EdgeDescriptor* _msg = _internal_mutable_edge_descriptor();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.EdgeToDesc.edge_descriptor)
  return _msg;
}
inline void EdgeToDesc::set_allocated_edge_descriptor(::TransCatSerial::EdgeDescriptor* edge_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete edge_descriptor_;
  }
  if (edge_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::EdgeDescriptor>::GetOwningArena(edge_descriptor);
    if (message_arena != submessage_arena) {
      edge_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  edge_descriptor_ = edge_descriptor;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.EdgeToDesc.edge_descriptor)
}

// -------------------------------------------------------------------

// EdgeToDescList

// repeated .TransCatSerial.EdgeToDesc edge_to_desc = 1;
inline int EdgeToDescList::_internal_edge_to_desc_size() const {
  return edge_to_desc_.size();
}
inline int EdgeToDescList::edge_to_desc_size() const {
  return _internal_edge_to_desc_size();
}
inline void EdgeToDescList::clear_edge_to_desc() {
  edge_to_desc_.Clear();
}
inline ::TransCatSerial::EdgeToDesc* EdgeToDescList::mutable_edge_to_desc(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.EdgeToDescList.edge_to_desc)
  return edge_to_desc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::EdgeToDesc >*
EdgeToDescList::mutable_edge_to_desc() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.EdgeToDescList.edge_to_desc)
  return &edge_to_desc_;
}
inline const ::TransCatSerial::EdgeToDesc& EdgeToDescList::_internal_edge_to_desc(int index) const {
  return edge_to_desc_.Get(index);
}
inline const ::TransCatSerial::EdgeToDesc& EdgeToDescList::edge_to_desc(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.EdgeToDescList.edge_to_desc)
  return _internal_edge_to_desc(index);
}
inline ::TransCatSerial::EdgeToDesc* EdgeToDescList::_internal_add_edge_to_desc() {
  return edge_to_desc_.Add();
}
inline ::TransCatSerial::EdgeToDesc* EdgeToDescList::add_edge_to_desc() {
  ::TransCatSerial::EdgeToDesc* _add = _internal_add_edge_to_desc();
  // @@protoc_insertion_point(field_add:TransCatSerial.EdgeToDescList.edge_to_desc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::EdgeToDesc >&
EdgeToDescList::edge_to_desc() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.EdgeToDescList.edge_to_desc)
  return edge_to_desc_;
}

// -------------------------------------------------------------------

// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Coordinates.lng)
}

// -------------------------------------------------------------------

// DistanceToStop

// uint32 stop_num = 1;
inline void DistanceToStop::clear_stop_num() {
  stop_num_ = 0u;
}
inline uint32_t DistanceToStop::_internal_stop_num() const {
  return stop_num_;
}
inline uint32_t DistanceToStop::stop_num() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.DistanceToStop.stop_num)
  return _internal_stop_num();
}
inline void DistanceToStop::_internal_set_stop_num(uint32_t value) {
  
  stop_num_ = value;
}
inline void DistanceToStop::set_stop_num(uint32_t value) {
  _internal_set_stop_num(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.DistanceToStop.stop_num)
}

// double distance = 2;
inline void DistanceToStop::clear_distance() {
  distance_ = 0;
}
inline double DistanceToStop::_internal_distance() const {
  return distance_;
}
inline double DistanceToStop::distance() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.DistanceToStop.distance)
  return _internal_distance();
}
inline void DistanceToStop::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void DistanceToStop::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.DistanceToStop.distance)
}

// -------------------------------------------------------------------

// Stop

// .TransCatSerial.Stop.StopType stop_type = 1;
inline void Stop::clear_stop_type() {
  stop_type_ = 0;
}
inline ::TransCatSerial::Stop_StopType Stop::_internal_stop_type() const {
  return static_cast< ::TransCatSerial::Stop_StopType >(stop_type_);
}
inline ::TransCatSerial::Stop_StopType Stop::stop_type() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Stop.stop_type)
  return _internal_stop_type();
}
inline void Stop::_internal_set_stop_type(::TransCatSerial::Stop_StopType value) {
  
  stop_type_ = value;
}
inline void Stop::set_stop_type(::TransCatSerial::Stop_StopType value) {
  _internal_set_stop_type(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Stop.stop_type)
}

// bytes stop_name = 2;
inline void Stop::clear_stop_name() {
  stop_name_.ClearToEmpty();
}
inline const std::string& Stop::stop_name() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Stop.stop_name)
  return _internal_stop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_stop_name(ArgT0&& arg0, ArgT... args) {
 
 stop_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransCatSerial.Stop.stop_name)
}
inline std::string* Stop::mutable_stop_name() {
  std::string* _s = _internal_mutable_stop_name();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.Stop.stop_name)
  return _s;
}
inline const std::string& Stop::_internal_stop_name() const {
  return stop_name_.Get();
}
inline void Stop::_internal_set_stop_name(const std::string& value) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_stop_name() {
  
  return stop_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Stop::release_stop_name() {
  // @@protoc_insertion_point(field_release:TransCatSerial.Stop.stop_name)
  return stop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Stop::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  stop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stop_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    stop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.Stop.stop_name)
}

// .TransCatSerial.Coordinates stop_coords = 3;
inline bool Stop::_internal_has_stop_coords() const {
  return this != internal_default_instance() && stop_coords_ != nullptr;
}
inline bool Stop::has_stop_coords() const {
  return _internal_has_stop_coords();
}
inline void Stop::clear_stop_coords() {
  if (GetArenaForAllocation() == nullptr && stop_coords_ != nullptr) {
    delete stop_coords_;
  }
  stop_coords_ = nullptr;
}
inline const ::TransCatSerial::Coordinates& Stop::_internal_stop_coords() const {
  const ::TransCatSerial::Coordinates* p = stop_coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::Coordinates&>(
      ::TransCatSerial::_Coordinates_default_instance_);
}
inline const ::TransCatSerial::Coordinates& Stop::stop_coords() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Stop.stop_coords)
  return _internal_stop_coords();
}
inline void Stop::unsafe_arena_set_allocated_stop_coords(
    ::TransCatSerial::Coordinates* stop_coords) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_coords_);
  }
  stop_coords_ = stop_coords;
  if (stop_coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.Stop.stop_coords)
}
inline ::TransCatSerial::Coordinates* Stop::release_stop_coords() {
  
  ::TransCatSerial::Coordinates* temp = stop_coords_;
  stop_coords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::Coordinates* Stop::unsafe_arena_release_stop_coords() {
  // @@protoc_insertion_point(field_release:TransCatSerial.Stop.stop_coords)
  
  ::TransCatSerial::Coordinates* temp = stop_coords_;
  stop_coords_ = nullptr;
  return temp;
}
inline ::TransCatSerial::Coordinates* Stop::_internal_mutable_stop_coords() {
  
  if (stop_coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::Coordinates>(GetArenaForAllocation());
    stop_coords_ = p;
  }
  return stop_coords_;
}
inline ::TransCatSerial::Coordinates* Stop::mutable_stop_coords() {
  ::TransCatSerial::Coordinates* _msg = _internal_mutable_stop_coords();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.Stop.stop_coords)
  return _msg;
}
inline void Stop::set_allocated_stop_coords(::TransCatSerial::Coordinates* stop_coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stop_coords_;
  }
  if (stop_coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::Coordinates>::GetOwningArena(stop_coords);
    if (message_arena != submessage_arena) {
      stop_coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_coords, submessage_arena);
    }
    
  } else {
    
  }
  stop_coords_ = stop_coords;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.Stop.stop_coords)
}

// repeated uint32 buses_at_stop = 4;
inline int Stop::_internal_buses_at_stop_size() const {
  return buses_at_stop_.size();
}
inline int Stop::buses_at_stop_size() const {
  return _internal_buses_at_stop_size();
}
inline void Stop::clear_buses_at_stop() {
  buses_at_stop_.Clear();
}
inline uint32_t Stop::_internal_buses_at_stop(int index) const {
  return buses_at_stop_.Get(index);
}
inline uint32_t Stop::buses_at_stop(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Stop.buses_at_stop)
  return _internal_buses_at_stop(index);
}
inline void Stop::set_buses_at_stop(int index, uint32_t value) {
  buses_at_stop_.Set(index, value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Stop.buses_at_stop)
}
inline void Stop::_internal_add_buses_at_stop(uint32_t value) {
  buses_at_stop_.Add(value);
}
inline void Stop::add_buses_at_stop(uint32_t value) {
  _internal_add_buses_at_stop(value);
  // @@protoc_insertion_point(field_add:TransCatSerial.Stop.buses_at_stop)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Stop::_internal_buses_at_stop() const {
  return buses_at_stop_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Stop::buses_at_stop() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.Stop.buses_at_stop)
  return _internal_buses_at_stop();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Stop::_internal_mutable_buses_at_stop() {
  return &buses_at_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Stop::mutable_buses_at_stop() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.Stop.buses_at_stop)
  return _internal_mutable_buses_at_stop();
}

// repeated .TransCatSerial.DistanceToStop distance_to_stop = 5;
inline int Stop::_internal_distance_to_stop_size() const {
  return distance_to_stop_.size();
}
inline int Stop::distance_to_stop_size() const {
  return _internal_distance_to_stop_size();
}
inline void Stop::clear_distance_to_stop() {
  distance_to_stop_.Clear();
}
inline ::TransCatSerial::DistanceToStop* Stop::mutable_distance_to_stop(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.Stop.distance_to_stop)
  return distance_to_stop_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::DistanceToStop >*
Stop::mutable_distance_to_stop() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.Stop.distance_to_stop)
  return &distance_to_stop_;
}
inline const ::TransCatSerial::DistanceToStop& Stop::_internal_distance_to_stop(int index) const {
  return distance_to_stop_.Get(index);
}
inline const ::TransCatSerial::DistanceToStop& Stop::distance_to_stop(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Stop.distance_to_stop)
  return _internal_distance_to_stop(index);
}
inline ::TransCatSerial::DistanceToStop* Stop::_internal_add_distance_to_stop() {
  return distance_to_stop_.Add();
}
inline ::TransCatSerial::DistanceToStop* Stop::add_distance_to_stop() {
  ::TransCatSerial::DistanceToStop* _add = _internal_add_distance_to_stop();
  // @@protoc_insertion_point(field_add:TransCatSerial.Stop.distance_to_stop)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::DistanceToStop >&
Stop::distance_to_stop() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.Stop.distance_to_stop)
  return distance_to_stop_;
}

// -------------------------------------------------------------------

// Bus

// .TransCatSerial.Bus.BusType bus_type = 1;
inline void Bus::clear_bus_type() {
  bus_type_ = 0;
}
inline ::TransCatSerial::Bus_BusType Bus::_internal_bus_type() const {
  return static_cast< ::TransCatSerial::Bus_BusType >(bus_type_);
}
inline ::TransCatSerial::Bus_BusType Bus::bus_type() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Bus.bus_type)
  return _internal_bus_type();
}
inline void Bus::_internal_set_bus_type(::TransCatSerial::Bus_BusType value) {
  
  bus_type_ = value;
}
inline void Bus::set_bus_type(::TransCatSerial::Bus_BusType value) {
  _internal_set_bus_type(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Bus.bus_type)
}

// bytes bus_name = 2;
inline void Bus::clear_bus_name() {
  bus_name_.ClearToEmpty();
}
inline const std::string& Bus::bus_name() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Bus.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 bus_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransCatSerial.Bus.bus_name)
}
inline std::string* Bus::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.Bus.bus_name)
  return _s;
}
inline const std::string& Bus::_internal_bus_name() const {
  return bus_name_.Get();
}
inline void Bus::_internal_set_bus_name(const std::string& value) {
  
  bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_bus_name() {
  
  return bus_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Bus::release_bus_name() {
  // @@protoc_insertion_point(field_release:TransCatSerial.Bus.bus_name)
  return bus_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Bus::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  bus_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bus_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bus_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.Bus.bus_name)
}

// repeated uint32 bus_stops = 3;
inline int Bus::_internal_bus_stops_size() const {
  return bus_stops_.size();
}
inline int Bus::bus_stops_size() const {
  return _internal_bus_stops_size();
}
inline void Bus::clear_bus_stops() {
  bus_stops_.Clear();
}
inline uint32_t Bus::_internal_bus_stops(int index) const {
  return bus_stops_.Get(index);
}
inline uint32_t Bus::bus_stops(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Bus.bus_stops)
  return _internal_bus_stops(index);
}
inline void Bus::set_bus_stops(int index, uint32_t value) {
  bus_stops_.Set(index, value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Bus.bus_stops)
}
inline void Bus::_internal_add_bus_stops(uint32_t value) {
  bus_stops_.Add(value);
}
inline void Bus::add_bus_stops(uint32_t value) {
  _internal_add_bus_stops(value);
  // @@protoc_insertion_point(field_add:TransCatSerial.Bus.bus_stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_bus_stops() const {
  return bus_stops_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::bus_stops() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.Bus.bus_stops)
  return _internal_bus_stops();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_bus_stops() {
  return &bus_stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_bus_stops() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.Bus.bus_stops)
  return _internal_mutable_bus_stops();
}

// -------------------------------------------------------------------

// StopList

// repeated .TransCatSerial.Stop stops = 1;
inline int StopList::_internal_stops_size() const {
  return stops_.size();
}
inline int StopList::stops_size() const {
  return _internal_stops_size();
}
inline void StopList::clear_stops() {
  stops_.Clear();
}
inline ::TransCatSerial::Stop* StopList::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.StopList.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Stop >*
StopList::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.StopList.stops)
  return &stops_;
}
inline const ::TransCatSerial::Stop& StopList::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::TransCatSerial::Stop& StopList::stops(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.StopList.stops)
  return _internal_stops(index);
}
inline ::TransCatSerial::Stop* StopList::_internal_add_stops() {
  return stops_.Add();
}
inline ::TransCatSerial::Stop* StopList::add_stops() {
  ::TransCatSerial::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:TransCatSerial.StopList.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Stop >&
StopList::stops() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.StopList.stops)
  return stops_;
}

// -------------------------------------------------------------------

// BusList

// repeated .TransCatSerial.Bus buses = 2;
inline int BusList::_internal_buses_size() const {
  return buses_.size();
}
inline int BusList::buses_size() const {
  return _internal_buses_size();
}
inline void BusList::clear_buses() {
  buses_.Clear();
}
inline ::TransCatSerial::Bus* BusList::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.BusList.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Bus >*
BusList::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.BusList.buses)
  return &buses_;
}
inline const ::TransCatSerial::Bus& BusList::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::TransCatSerial::Bus& BusList::buses(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.BusList.buses)
  return _internal_buses(index);
}
inline ::TransCatSerial::Bus* BusList::_internal_add_buses() {
  return buses_.Add();
}
inline ::TransCatSerial::Bus* BusList::add_buses() {
  ::TransCatSerial::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:TransCatSerial.BusList.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Bus >&
BusList::buses() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.BusList.buses)
  return buses_;
}

// -------------------------------------------------------------------

// TransportCatalogue

// .TransCatSerial.StopList stops = 1;
inline bool TransportCatalogue::_internal_has_stops() const {
  return this != internal_default_instance() && stops_ != nullptr;
}
inline bool TransportCatalogue::has_stops() const {
  return _internal_has_stops();
}
inline void TransportCatalogue::clear_stops() {
  if (GetArenaForAllocation() == nullptr && stops_ != nullptr) {
    delete stops_;
  }
  stops_ = nullptr;
}
inline const ::TransCatSerial::StopList& TransportCatalogue::_internal_stops() const {
  const ::TransCatSerial::StopList* p = stops_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::StopList&>(
      ::TransCatSerial::_StopList_default_instance_);
}
inline const ::TransCatSerial::StopList& TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.stops)
  return _internal_stops();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_stops(
    ::TransCatSerial::StopList* stops) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stops_);
  }
  stops_ = stops;
  if (stops) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.stops)
}
inline ::TransCatSerial::StopList* TransportCatalogue::release_stops() {
  
  ::TransCatSerial::StopList* temp = stops_;
  stops_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::StopList* TransportCatalogue::unsafe_arena_release_stops() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.stops)
  
  ::TransCatSerial::StopList* temp = stops_;
  stops_ = nullptr;
  return temp;
}
inline ::TransCatSerial::StopList* TransportCatalogue::_internal_mutable_stops() {
  
  if (stops_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::StopList>(GetArenaForAllocation());
    stops_ = p;
  }
  return stops_;
}
inline ::TransCatSerial::StopList* TransportCatalogue::mutable_stops() {
  ::TransCatSerial::StopList* _msg = _internal_mutable_stops();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.stops)
  return _msg;
}
inline void TransportCatalogue::set_allocated_stops(::TransCatSerial::StopList* stops) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stops_;
  }
  if (stops) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::StopList>::GetOwningArena(stops);
    if (message_arena != submessage_arena) {
      stops = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stops, submessage_arena);
    }
    
  } else {
    
  }
  stops_ = stops;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.stops)
}

// .TransCatSerial.BusList buses = 2;
inline bool TransportCatalogue::_internal_has_buses() const {
  return this != internal_default_instance() && buses_ != nullptr;
}
inline bool TransportCatalogue::has_buses() const {
  return _internal_has_buses();
}
inline void TransportCatalogue::clear_buses() {
  if (GetArenaForAllocation() == nullptr && buses_ != nullptr) {
    delete buses_;
  }
  buses_ = nullptr;
}
inline const ::TransCatSerial::BusList& TransportCatalogue::_internal_buses() const {
  const ::TransCatSerial::BusList* p = buses_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::BusList&>(
      ::TransCatSerial::_BusList_default_instance_);
}
inline const ::TransCatSerial::BusList& TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.buses)
  return _internal_buses();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_buses(
    ::TransCatSerial::BusList* buses) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buses_);
  }
  buses_ = buses;
  if (buses) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.buses)
}
inline ::TransCatSerial::BusList* TransportCatalogue::release_buses() {
  
  ::TransCatSerial::BusList* temp = buses_;
  buses_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::BusList* TransportCatalogue::unsafe_arena_release_buses() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.buses)
  
  ::TransCatSerial::BusList* temp = buses_;
  buses_ = nullptr;
  return temp;
}
inline ::TransCatSerial::BusList* TransportCatalogue::_internal_mutable_buses() {
  
  if (buses_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::BusList>(GetArenaForAllocation());
    buses_ = p;
  }
  return buses_;
}
inline ::TransCatSerial::BusList* TransportCatalogue::mutable_buses() {
  ::TransCatSerial::BusList* _msg = _internal_mutable_buses();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.buses)
  return _msg;
}
inline void TransportCatalogue::set_allocated_buses(::TransCatSerial::BusList* buses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete buses_;
  }
  if (buses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::BusList>::GetOwningArena(buses);
    if (message_arena != submessage_arena) {
      buses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buses, submessage_arena);
    }
    
  } else {
    
  }
  buses_ = buses;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.buses)
}

// .TransCatSerial.RouterContext router_context = 3;
inline bool TransportCatalogue::_internal_has_router_context() const {
  return this != internal_default_instance() && router_context_ != nullptr;
}
inline bool TransportCatalogue::has_router_context() const {
  return _internal_has_router_context();
}
inline const ::TransCatSerial::RouterContext& TransportCatalogue::_internal_router_context() const {
  const ::TransCatSerial::RouterContext* p = router_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::RouterContext&>(
      ::TransCatSerial::_RouterContext_default_instance_);
}
inline const ::TransCatSerial::RouterContext& TransportCatalogue::router_context() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.router_context)
  return _internal_router_context();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router_context(
    ::TransCatSerial::RouterContext* router_context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_context_);
  }
  router_context_ = router_context;
  if (router_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.router_context)
}
inline ::TransCatSerial::RouterContext* TransportCatalogue::release_router_context() {
  
  ::TransCatSerial::RouterContext* temp = router_context_;
  router_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::RouterContext* TransportCatalogue::unsafe_arena_release_router_context() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.router_context)
  
  ::TransCatSerial::RouterContext* temp = router_context_;
  router_context_ = nullptr;
  return temp;
}
inline ::TransCatSerial::RouterContext* TransportCatalogue::_internal_mutable_router_context() {
  
  if (router_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::RouterContext>(GetArenaForAllocation());
    router_context_ = p;
  }
  return router_context_;
}
inline ::TransCatSerial::RouterContext* TransportCatalogue::mutable_router_context() {
  ::TransCatSerial::RouterContext* _msg = _internal_mutable_router_context();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.router_context)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router_context(::TransCatSerial::RouterContext* router_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_context_);
  }
  if (router_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_context));
    if (message_arena != submessage_arena) {
      router_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_context, submessage_arena);
    }
    
  } else {
    
  }
  router_context_ = router_context;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.router_context)
}

// .TransCatSerial.MapRendererContext render_context = 4;
inline bool TransportCatalogue::_internal_has_render_context() const {
  return this != internal_default_instance() && render_context_ != nullptr;
}
inline bool TransportCatalogue::has_render_context() const {
  return _internal_has_render_context();
}
inline const ::TransCatSerial::MapRendererContext& TransportCatalogue::_internal_render_context() const {
  const ::TransCatSerial::MapRendererContext* p = render_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::MapRendererContext&>(
      ::TransCatSerial::_MapRendererContext_default_instance_);
}
inline const ::TransCatSerial::MapRendererContext& TransportCatalogue::render_context() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.render_context)
  return _internal_render_context();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_context(
    ::TransCatSerial::MapRendererContext* render_context) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_context_);
  }
  render_context_ = render_context;
  if (render_context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.render_context)
}
inline ::TransCatSerial::MapRendererContext* TransportCatalogue::release_render_context() {
  
  ::TransCatSerial::MapRendererContext* temp = render_context_;
  render_context_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::MapRendererContext* TransportCatalogue::unsafe_arena_release_render_context() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.render_context)
  
  ::TransCatSerial::MapRendererContext* temp = render_context_;
  render_context_ = nullptr;
  return temp;
}
inline ::TransCatSerial::MapRendererContext* TransportCatalogue::_internal_mutable_render_context() {
  
  if (render_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::MapRendererContext>(GetArenaForAllocation());
    render_context_ = p;
  }
  return render_context_;
}
inline ::TransCatSerial::MapRendererContext* TransportCatalogue::mutable_render_context() {
  ::TransCatSerial::MapRendererContext* _msg = _internal_mutable_render_context();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.render_context)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_context(::TransCatSerial::MapRendererContext* render_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_context_);
  }
  if (render_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_context));
    if (message_arena != submessage_arena) {
      render_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_context, submessage_arena);
    }
    
  } else {
    
  }
  render_context_ = render_context;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.render_context)
}

// bool is_routes_data = 5;
inline void TransportCatalogue::clear_is_routes_data() {
  is_routes_data_ = false;
}
inline bool TransportCatalogue::_internal_is_routes_data() const {
  return is_routes_data_;
}
inline bool TransportCatalogue::is_routes_data() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.is_routes_data)
  return _internal_is_routes_data();
}
inline void TransportCatalogue::_internal_set_is_routes_data(bool value) {
  
  is_routes_data_ = value;
}
inline void TransportCatalogue::set_is_routes_data(bool value) {
  _internal_set_is_routes_data(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.TransportCatalogue.is_routes_data)
}

// .TransCatSerial.StopNameToVertexList stop_name_to_enter_vertex = 6;
inline bool TransportCatalogue::_internal_has_stop_name_to_enter_vertex() const {
  return this != internal_default_instance() && stop_name_to_enter_vertex_ != nullptr;
}
inline bool TransportCatalogue::has_stop_name_to_enter_vertex() const {
  return _internal_has_stop_name_to_enter_vertex();
}
inline void TransportCatalogue::clear_stop_name_to_enter_vertex() {
  if (GetArenaForAllocation() == nullptr && stop_name_to_enter_vertex_ != nullptr) {
    delete stop_name_to_enter_vertex_;
  }
  stop_name_to_enter_vertex_ = nullptr;
}
inline const ::TransCatSerial::StopNameToVertexList& TransportCatalogue::_internal_stop_name_to_enter_vertex() const {
  const ::TransCatSerial::StopNameToVertexList* p = stop_name_to_enter_vertex_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::StopNameToVertexList&>(
      ::TransCatSerial::_StopNameToVertexList_default_instance_);
}
inline const ::TransCatSerial::StopNameToVertexList& TransportCatalogue::stop_name_to_enter_vertex() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.stop_name_to_enter_vertex)
  return _internal_stop_name_to_enter_vertex();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_stop_name_to_enter_vertex(
    ::TransCatSerial::StopNameToVertexList* stop_name_to_enter_vertex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_name_to_enter_vertex_);
  }
  stop_name_to_enter_vertex_ = stop_name_to_enter_vertex;
  if (stop_name_to_enter_vertex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.stop_name_to_enter_vertex)
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::release_stop_name_to_enter_vertex() {
  
  ::TransCatSerial::StopNameToVertexList* temp = stop_name_to_enter_vertex_;
  stop_name_to_enter_vertex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::unsafe_arena_release_stop_name_to_enter_vertex() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.stop_name_to_enter_vertex)
  
  ::TransCatSerial::StopNameToVertexList* temp = stop_name_to_enter_vertex_;
  stop_name_to_enter_vertex_ = nullptr;
  return temp;
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::_internal_mutable_stop_name_to_enter_vertex() {
  
  if (stop_name_to_enter_vertex_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::StopNameToVertexList>(GetArenaForAllocation());
    stop_name_to_enter_vertex_ = p;
  }
  return stop_name_to_enter_vertex_;
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::mutable_stop_name_to_enter_vertex() {
  ::TransCatSerial::StopNameToVertexList* _msg = _internal_mutable_stop_name_to_enter_vertex();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.stop_name_to_enter_vertex)
  return _msg;
}
inline void TransportCatalogue::set_allocated_stop_name_to_enter_vertex(::TransCatSerial::StopNameToVertexList* stop_name_to_enter_vertex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stop_name_to_enter_vertex_;
  }
  if (stop_name_to_enter_vertex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::StopNameToVertexList>::GetOwningArena(stop_name_to_enter_vertex);
    if (message_arena != submessage_arena) {
      stop_name_to_enter_vertex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_name_to_enter_vertex, submessage_arena);
    }
    
  } else {
    
  }
  stop_name_to_enter_vertex_ = stop_name_to_enter_vertex;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.stop_name_to_enter_vertex)
}

// .TransCatSerial.StopNameToVertexList stop_name_to_exit_vertex = 7;
inline bool TransportCatalogue::_internal_has_stop_name_to_exit_vertex() const {
  return this != internal_default_instance() && stop_name_to_exit_vertex_ != nullptr;
}
inline bool TransportCatalogue::has_stop_name_to_exit_vertex() const {
  return _internal_has_stop_name_to_exit_vertex();
}
inline void TransportCatalogue::clear_stop_name_to_exit_vertex() {
  if (GetArenaForAllocation() == nullptr && stop_name_to_exit_vertex_ != nullptr) {
    delete stop_name_to_exit_vertex_;
  }
  stop_name_to_exit_vertex_ = nullptr;
}
inline const ::TransCatSerial::StopNameToVertexList& TransportCatalogue::_internal_stop_name_to_exit_vertex() const {
  const ::TransCatSerial::StopNameToVertexList* p = stop_name_to_exit_vertex_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::StopNameToVertexList&>(
      ::TransCatSerial::_StopNameToVertexList_default_instance_);
}
inline const ::TransCatSerial::StopNameToVertexList& TransportCatalogue::stop_name_to_exit_vertex() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.stop_name_to_exit_vertex)
  return _internal_stop_name_to_exit_vertex();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_stop_name_to_exit_vertex(
    ::TransCatSerial::StopNameToVertexList* stop_name_to_exit_vertex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_name_to_exit_vertex_);
  }
  stop_name_to_exit_vertex_ = stop_name_to_exit_vertex;
  if (stop_name_to_exit_vertex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.stop_name_to_exit_vertex)
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::release_stop_name_to_exit_vertex() {
  
  ::TransCatSerial::StopNameToVertexList* temp = stop_name_to_exit_vertex_;
  stop_name_to_exit_vertex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::unsafe_arena_release_stop_name_to_exit_vertex() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.stop_name_to_exit_vertex)
  
  ::TransCatSerial::StopNameToVertexList* temp = stop_name_to_exit_vertex_;
  stop_name_to_exit_vertex_ = nullptr;
  return temp;
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::_internal_mutable_stop_name_to_exit_vertex() {
  
  if (stop_name_to_exit_vertex_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::StopNameToVertexList>(GetArenaForAllocation());
    stop_name_to_exit_vertex_ = p;
  }
  return stop_name_to_exit_vertex_;
}
inline ::TransCatSerial::StopNameToVertexList* TransportCatalogue::mutable_stop_name_to_exit_vertex() {
  ::TransCatSerial::StopNameToVertexList* _msg = _internal_mutable_stop_name_to_exit_vertex();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.stop_name_to_exit_vertex)
  return _msg;
}
inline void TransportCatalogue::set_allocated_stop_name_to_exit_vertex(::TransCatSerial::StopNameToVertexList* stop_name_to_exit_vertex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stop_name_to_exit_vertex_;
  }
  if (stop_name_to_exit_vertex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::StopNameToVertexList>::GetOwningArena(stop_name_to_exit_vertex);
    if (message_arena != submessage_arena) {
      stop_name_to_exit_vertex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_name_to_exit_vertex, submessage_arena);
    }
    
  } else {
    
  }
  stop_name_to_exit_vertex_ = stop_name_to_exit_vertex;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.stop_name_to_exit_vertex)
}

// .TransCatSerial.EdgeToDescList edge_to_desc = 8;
inline bool TransportCatalogue::_internal_has_edge_to_desc() const {
  return this != internal_default_instance() && edge_to_desc_ != nullptr;
}
inline bool TransportCatalogue::has_edge_to_desc() const {
  return _internal_has_edge_to_desc();
}
inline void TransportCatalogue::clear_edge_to_desc() {
  if (GetArenaForAllocation() == nullptr && edge_to_desc_ != nullptr) {
    delete edge_to_desc_;
  }
  edge_to_desc_ = nullptr;
}
inline const ::TransCatSerial::EdgeToDescList& TransportCatalogue::_internal_edge_to_desc() const {
  const ::TransCatSerial::EdgeToDescList* p = edge_to_desc_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::EdgeToDescList&>(
      ::TransCatSerial::_EdgeToDescList_default_instance_);
}
inline const ::TransCatSerial::EdgeToDescList& TransportCatalogue::edge_to_desc() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.edge_to_desc)
  return _internal_edge_to_desc();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_edge_to_desc(
    ::TransCatSerial::EdgeToDescList* edge_to_desc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edge_to_desc_);
  }
  edge_to_desc_ = edge_to_desc;
  if (edge_to_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.edge_to_desc)
}
inline ::TransCatSerial::EdgeToDescList* TransportCatalogue::release_edge_to_desc() {
  
  ::TransCatSerial::EdgeToDescList* temp = edge_to_desc_;
  edge_to_desc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::EdgeToDescList* TransportCatalogue::unsafe_arena_release_edge_to_desc() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.edge_to_desc)
  
  ::TransCatSerial::EdgeToDescList* temp = edge_to_desc_;
  edge_to_desc_ = nullptr;
  return temp;
}
inline ::TransCatSerial::EdgeToDescList* TransportCatalogue::_internal_mutable_edge_to_desc() {
  
  if (edge_to_desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::EdgeToDescList>(GetArenaForAllocation());
    edge_to_desc_ = p;
  }
  return edge_to_desc_;
}
inline ::TransCatSerial::EdgeToDescList* TransportCatalogue::mutable_edge_to_desc() {
  ::TransCatSerial::EdgeToDescList* _msg = _internal_mutable_edge_to_desc();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.edge_to_desc)
  return _msg;
}
inline void TransportCatalogue::set_allocated_edge_to_desc(::TransCatSerial::EdgeToDescList* edge_to_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete edge_to_desc_;
  }
  if (edge_to_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TransCatSerial::EdgeToDescList>::GetOwningArena(edge_to_desc);
    if (message_arena != submessage_arena) {
      edge_to_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edge_to_desc, submessage_arena);
    }
    
  } else {
    
  }
  edge_to_desc_ = edge_to_desc;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.edge_to_desc)
}

// .TransCatSerial.Edges edges = 9;
inline bool TransportCatalogue::_internal_has_edges() const {
  return this != internal_default_instance() && edges_ != nullptr;
}
inline bool TransportCatalogue::has_edges() const {
  return _internal_has_edges();
}
inline const ::TransCatSerial::Edges& TransportCatalogue::_internal_edges() const {
  const ::TransCatSerial::Edges* p = edges_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::Edges&>(
      ::TransCatSerial::_Edges_default_instance_);
}
inline const ::TransCatSerial::Edges& TransportCatalogue::edges() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.edges)
  return _internal_edges();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_edges(
    ::TransCatSerial::Edges* edges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  edges_ = edges;
  if (edges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.edges)
}
inline ::TransCatSerial::Edges* TransportCatalogue::release_edges() {
  
  ::TransCatSerial::Edges* temp = edges_;
  edges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::Edges* TransportCatalogue::unsafe_arena_release_edges() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.edges)
  
  ::TransCatSerial::Edges* temp = edges_;
  edges_ = nullptr;
  return temp;
}
inline ::TransCatSerial::Edges* TransportCatalogue::_internal_mutable_edges() {
  
  if (edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::Edges>(GetArenaForAllocation());
    edges_ = p;
  }
  return edges_;
}
inline ::TransCatSerial::Edges* TransportCatalogue::mutable_edges() {
  ::TransCatSerial::Edges* _msg = _internal_mutable_edges();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.edges)
  return _msg;
}
inline void TransportCatalogue::set_allocated_edges(::TransCatSerial::Edges* edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  if (edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges));
    if (message_arena != submessage_arena) {
      edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edges, submessage_arena);
    }
    
  } else {
    
  }
  edges_ = edges;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.edges)
}

// .TransCatSerial.IncidenceLists incidence_lists = 10;
inline bool TransportCatalogue::_internal_has_incidence_lists() const {
  return this != internal_default_instance() && incidence_lists_ != nullptr;
}
inline bool TransportCatalogue::has_incidence_lists() const {
  return _internal_has_incidence_lists();
}
inline const ::TransCatSerial::IncidenceLists& TransportCatalogue::_internal_incidence_lists() const {
  const ::TransCatSerial::IncidenceLists* p = incidence_lists_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::IncidenceLists&>(
      ::TransCatSerial::_IncidenceLists_default_instance_);
}
inline const ::TransCatSerial::IncidenceLists& TransportCatalogue::incidence_lists() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.incidence_lists)
  return _internal_incidence_lists();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_incidence_lists(
    ::TransCatSerial::IncidenceLists* incidence_lists) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_lists_);
  }
  incidence_lists_ = incidence_lists;
  if (incidence_lists) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.incidence_lists)
}
inline ::TransCatSerial::IncidenceLists* TransportCatalogue::release_incidence_lists() {
  
  ::TransCatSerial::IncidenceLists* temp = incidence_lists_;
  incidence_lists_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::IncidenceLists* TransportCatalogue::unsafe_arena_release_incidence_lists() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.incidence_lists)
  
  ::TransCatSerial::IncidenceLists* temp = incidence_lists_;
  incidence_lists_ = nullptr;
  return temp;
}
inline ::TransCatSerial::IncidenceLists* TransportCatalogue::_internal_mutable_incidence_lists() {
  
  if (incidence_lists_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::IncidenceLists>(GetArenaForAllocation());
    incidence_lists_ = p;
  }
  return incidence_lists_;
}
inline ::TransCatSerial::IncidenceLists* TransportCatalogue::mutable_incidence_lists() {
  ::TransCatSerial::IncidenceLists* _msg = _internal_mutable_incidence_lists();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.incidence_lists)
  return _msg;
}
inline void TransportCatalogue::set_allocated_incidence_lists(::TransCatSerial::IncidenceLists* incidence_lists) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_lists_);
  }
  if (incidence_lists) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incidence_lists));
    if (message_arena != submessage_arena) {
      incidence_lists = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incidence_lists, submessage_arena);
    }
    
  } else {
    
  }
  incidence_lists_ = incidence_lists;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.incidence_lists)
}

// .TransCatSerial.RoutesData routes_data = 11;
inline bool TransportCatalogue::_internal_has_routes_data() const {
  return this != internal_default_instance() && routes_data_ != nullptr;
}
inline bool TransportCatalogue::has_routes_data() const {
  return _internal_has_routes_data();
}
inline const ::TransCatSerial::RoutesData& TransportCatalogue::_internal_routes_data() const {
  const ::TransCatSerial::RoutesData* p = routes_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TransCatSerial::RoutesData&>(
      ::TransCatSerial::_RoutesData_default_instance_);
}
inline const ::TransCatSerial::RoutesData& TransportCatalogue::routes_data() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.TransportCatalogue.routes_data)
  return _internal_routes_data();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_routes_data(
    ::TransCatSerial::RoutesData* routes_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routes_data_);
  }
  routes_data_ = routes_data;
  if (routes_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransCatSerial.TransportCatalogue.routes_data)
}
inline ::TransCatSerial::RoutesData* TransportCatalogue::release_routes_data() {
  
  ::TransCatSerial::RoutesData* temp = routes_data_;
  routes_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TransCatSerial::RoutesData* TransportCatalogue::unsafe_arena_release_routes_data() {
  // @@protoc_insertion_point(field_release:TransCatSerial.TransportCatalogue.routes_data)
  
  ::TransCatSerial::RoutesData* temp = routes_data_;
  routes_data_ = nullptr;
  return temp;
}
inline ::TransCatSerial::RoutesData* TransportCatalogue::_internal_mutable_routes_data() {
  
  if (routes_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TransCatSerial::RoutesData>(GetArenaForAllocation());
    routes_data_ = p;
  }
  return routes_data_;
}
inline ::TransCatSerial::RoutesData* TransportCatalogue::mutable_routes_data() {
  ::TransCatSerial::RoutesData* _msg = _internal_mutable_routes_data();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.TransportCatalogue.routes_data)
  return _msg;
}
inline void TransportCatalogue::set_allocated_routes_data(::TransCatSerial::RoutesData* routes_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routes_data_);
  }
  if (routes_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routes_data));
    if (message_arena != submessage_arena) {
      routes_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routes_data, submessage_arena);
    }
    
  } else {
    
  }
  routes_data_ = routes_data;
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.TransportCatalogue.routes_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TransCatSerial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TransCatSerial::EdgeDescriptor_EdgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransCatSerial::EdgeDescriptor_EdgeType>() {
  return ::TransCatSerial::EdgeDescriptor_EdgeType_descriptor();
}
template <> struct is_proto_enum< ::TransCatSerial::Stop_StopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransCatSerial::Stop_StopType>() {
  return ::TransCatSerial::Stop_StopType_descriptor();
}
template <> struct is_proto_enum< ::TransCatSerial::Bus_BusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransCatSerial::Bus_BusType>() {
  return ::TransCatSerial::Bus_BusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
