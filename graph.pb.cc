// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TransCatSerial {
constexpr Edge::Edge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , weight_(0){}
struct EdgeDefaultTypeInternal {
  constexpr EdgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeDefaultTypeInternal _Edge_default_instance_;
constexpr Edges::Edges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edges_(){}
struct EdgesDefaultTypeInternal {
  constexpr EdgesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgesDefaultTypeInternal() {}
  union {
    Edges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgesDefaultTypeInternal _Edges_default_instance_;
constexpr IncidenceList::IncidenceList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_id_()
  , _edge_id_cached_byte_size_(0){}
struct IncidenceListDefaultTypeInternal {
  constexpr IncidenceListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncidenceListDefaultTypeInternal() {}
  union {
    IncidenceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
constexpr IncidenceLists::IncidenceLists(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : incidence_list_(){}
struct IncidenceListsDefaultTypeInternal {
  constexpr IncidenceListsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IncidenceListsDefaultTypeInternal() {}
  union {
    IncidenceLists _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IncidenceListsDefaultTypeInternal _IncidenceLists_default_instance_;
constexpr RouteData::RouteData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_(0)
  , has_value_(false)
  , has_prev_edge_value_(false)
  , prev_edge_(0u){}
struct RouteDataDefaultTypeInternal {
  constexpr RouteDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteDataDefaultTypeInternal() {}
  union {
    RouteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteDataDefaultTypeInternal _RouteData_default_instance_;
constexpr RoutesSecIndexData::RoutesSecIndexData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sec_routes_data_(){}
struct RoutesSecIndexDataDefaultTypeInternal {
  constexpr RoutesSecIndexDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutesSecIndexDataDefaultTypeInternal() {}
  union {
    RoutesSecIndexData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutesSecIndexDataDefaultTypeInternal _RoutesSecIndexData_default_instance_;
constexpr RoutesData::RoutesData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : first_routes_data_(){}
struct RoutesDataDefaultTypeInternal {
  constexpr RoutesDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutesDataDefaultTypeInternal() {}
  union {
    RoutesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutesDataDefaultTypeInternal _RoutesData_default_instance_;
}  // namespace TransCatSerial
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_graph_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_graph_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Edge, from_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Edge, to_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Edge, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Edges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Edges, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::IncidenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::IncidenceList, edge_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::IncidenceLists, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::IncidenceLists, incidence_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RouteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RouteData, has_value_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RouteData, weight_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RouteData, has_prev_edge_value_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RouteData, prev_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RoutesSecIndexData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RoutesSecIndexData, sec_routes_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RoutesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::RoutesData, first_routes_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TransCatSerial::Edge)},
  { 9, -1, -1, sizeof(::TransCatSerial::Edges)},
  { 16, -1, -1, sizeof(::TransCatSerial::IncidenceList)},
  { 23, -1, -1, sizeof(::TransCatSerial::IncidenceLists)},
  { 30, -1, -1, sizeof(::TransCatSerial::RouteData)},
  { 40, -1, -1, sizeof(::TransCatSerial::RoutesSecIndexData)},
  { 47, -1, -1, sizeof(::TransCatSerial::RoutesData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_Edges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_IncidenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_IncidenceLists_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_RouteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_RoutesSecIndexData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_RoutesData_default_instance_),
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\016TransCatSerial\"0\n\004Edge\022\014\n"
  "\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\016\n\006weight\030\003 \001(\001\""
  ",\n\005Edges\022#\n\005edges\030\001 \003(\0132\024.TransCatSerial"
  ".Edge\" \n\rIncidenceList\022\017\n\007edge_id\030\001 \003(\r\""
  "G\n\016IncidenceLists\0225\n\016incidence_list\030\001 \003("
  "\0132\035.TransCatSerial.IncidenceList\"^\n\tRout"
  "eData\022\021\n\thas_value\030\001 \001(\010\022\016\n\006weight\030\002 \001(\001"
  "\022\033\n\023has_prev_edge_value\030\003 \001(\010\022\021\n\tprev_ed"
  "ge\030\004 \001(\r\"H\n\022RoutesSecIndexData\0222\n\017sec_ro"
  "utes_data\030\001 \003(\0132\031.TransCatSerial.RouteDa"
  "ta\"K\n\nRoutesData\022=\n\021first_routes_data\030\001 "
  "\003(\0132\".TransCatSerial.RoutesSecIndexDatab"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_graph_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto = {
  false, false, 487, descriptor_table_protodef_graph_2eproto, "graph.proto", 
  &descriptor_table_graph_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
  file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto, file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace TransCatSerial {

// ===================================================================

class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.Edge)
}

inline void Edge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:TransCatSerial.Edge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Edge::ArenaDtor(void* object) {
  Edge* _this = reinterpret_cast< Edge* >(object);
  (void)_this;
}
void Edge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from());
  }

  // uint32 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }

void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Edge *>(to)->MergeFrom(
      static_cast<const Edge &>(from));
}


void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _internal_set_to(from._internal_to());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, weight_)
      + sizeof(Edge::weight_)
      - PROTOBUF_FIELD_OFFSET(Edge, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class Edges::_Internal {
 public:
};

Edges::Edges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  edges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.Edges)
}
Edges::Edges(const Edges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.Edges)
}

inline void Edges::SharedCtor() {
}

Edges::~Edges() {
  // @@protoc_insertion_point(destructor:TransCatSerial.Edges)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Edges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Edges::ArenaDtor(void* object) {
  Edges* _this = reinterpret_cast< Edges* >(object);
  (void)_this;
}
void Edges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Edges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Edges::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.Edges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.Edges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.Edge edges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.Edges)
  return target;
}

size_t Edges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.Edges)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.Edge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Edges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edges::GetClassData() const { return &_class_data_; }

void Edges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Edges *>(to)->MergeFrom(
      static_cast<const Edges &>(from));
}


void Edges::MergeFrom(const Edges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.Edges)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  edges_.MergeFrom(from.edges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edges::CopyFrom(const Edges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.Edges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edges::IsInitialized() const {
  return true;
}

void Edges::InternalSwap(Edges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Edges::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class IncidenceList::_Internal {
 public:
};

IncidenceList::IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  edge_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.IncidenceList)
}
IncidenceList::IncidenceList(const IncidenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_id_(from.edge_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.IncidenceList)
}

inline void IncidenceList::SharedCtor() {
}

IncidenceList::~IncidenceList() {
  // @@protoc_insertion_point(destructor:TransCatSerial.IncidenceList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncidenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IncidenceList::ArenaDtor(void* object) {
  IncidenceList* _this = reinterpret_cast< IncidenceList* >(object);
  (void)_this;
}
void IncidenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.IncidenceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 edge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_edge_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidenceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.IncidenceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 edge_id = 1;
  {
    int byte_size = _edge_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_edge_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.IncidenceList)
  return target;
}

size_t IncidenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.IncidenceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 edge_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->edge_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edge_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidenceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncidenceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidenceList::GetClassData() const { return &_class_data_; }

void IncidenceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IncidenceList *>(to)->MergeFrom(
      static_cast<const IncidenceList &>(from));
}


void IncidenceList::MergeFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.IncidenceList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  edge_id_.MergeFrom(from.edge_id_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidenceList::CopyFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceList::IsInitialized() const {
  return true;
}

void IncidenceList::InternalSwap(IncidenceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  edge_id_.InternalSwap(&other->edge_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class IncidenceLists::_Internal {
 public:
};

IncidenceLists::IncidenceLists(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  incidence_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.IncidenceLists)
}
IncidenceLists::IncidenceLists(const IncidenceLists& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      incidence_list_(from.incidence_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.IncidenceLists)
}

inline void IncidenceLists::SharedCtor() {
}

IncidenceLists::~IncidenceLists() {
  // @@protoc_insertion_point(destructor:TransCatSerial.IncidenceLists)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IncidenceLists::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IncidenceLists::ArenaDtor(void* object) {
  IncidenceLists* _this = reinterpret_cast< IncidenceLists* >(object);
  (void)_this;
}
void IncidenceLists::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidenceLists::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IncidenceLists::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.IncidenceLists)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incidence_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidenceLists::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.IncidenceList incidence_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incidence_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidenceLists::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.IncidenceLists)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.IncidenceList incidence_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_incidence_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_incidence_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.IncidenceLists)
  return target;
}

size_t IncidenceLists::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.IncidenceLists)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.IncidenceList incidence_list = 1;
  total_size += 1UL * this->_internal_incidence_list_size();
  for (const auto& msg : this->incidence_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidenceLists::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IncidenceLists::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidenceLists::GetClassData() const { return &_class_data_; }

void IncidenceLists::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IncidenceLists *>(to)->MergeFrom(
      static_cast<const IncidenceLists &>(from));
}


void IncidenceLists::MergeFrom(const IncidenceLists& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.IncidenceLists)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  incidence_list_.MergeFrom(from.incidence_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidenceLists::CopyFrom(const IncidenceLists& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.IncidenceLists)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceLists::IsInitialized() const {
  return true;
}

void IncidenceLists::InternalSwap(IncidenceLists* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  incidence_list_.InternalSwap(&other->incidence_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceLists::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// ===================================================================

class RouteData::_Internal {
 public:
};

RouteData::RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.RouteData)
}
RouteData::RouteData(const RouteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_edge_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(prev_edge_));
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.RouteData)
}

inline void RouteData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prev_edge_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(prev_edge_));
}

RouteData::~RouteData() {
  // @@protoc_insertion_point(destructor:TransCatSerial.RouteData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RouteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteData::ArenaDtor(void* object) {
  RouteData* _this = reinterpret_cast< RouteData* >(object);
  (void)_this;
}
void RouteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RouteData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.RouteData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_edge_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(prev_edge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          has_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool has_prev_edge_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          has_prev_edge_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 prev_edge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prev_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.RouteData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_value = 1;
  if (this->_internal_has_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_value(), target);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // bool has_prev_edge_value = 3;
  if (this->_internal_has_prev_edge_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_prev_edge_value(), target);
  }

  // uint32 prev_edge = 4;
  if (this->_internal_prev_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prev_edge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.RouteData)
  return target;
}

size_t RouteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.RouteData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // bool has_value = 1;
  if (this->_internal_has_value() != 0) {
    total_size += 1 + 1;
  }

  // bool has_prev_edge_value = 3;
  if (this->_internal_has_prev_edge_value() != 0) {
    total_size += 1 + 1;
  }

  // uint32 prev_edge = 4;
  if (this->_internal_prev_edge() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prev_edge());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RouteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteData::GetClassData() const { return &_class_data_; }

void RouteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RouteData *>(to)->MergeFrom(
      static_cast<const RouteData &>(from));
}


void RouteData::MergeFrom(const RouteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.RouteData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_has_value() != 0) {
    _internal_set_has_value(from._internal_has_value());
  }
  if (from._internal_has_prev_edge_value() != 0) {
    _internal_set_has_prev_edge_value(from._internal_has_prev_edge_value());
  }
  if (from._internal_prev_edge() != 0) {
    _internal_set_prev_edge(from._internal_prev_edge());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteData::CopyFrom(const RouteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.RouteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteData::IsInitialized() const {
  return true;
}

void RouteData::InternalSwap(RouteData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteData, prev_edge_)
      + sizeof(RouteData::prev_edge_)
      - PROTOBUF_FIELD_OFFSET(RouteData, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[4]);
}

// ===================================================================

class RoutesSecIndexData::_Internal {
 public:
};

RoutesSecIndexData::RoutesSecIndexData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sec_routes_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.RoutesSecIndexData)
}
RoutesSecIndexData::RoutesSecIndexData(const RoutesSecIndexData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sec_routes_data_(from.sec_routes_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.RoutesSecIndexData)
}

inline void RoutesSecIndexData::SharedCtor() {
}

RoutesSecIndexData::~RoutesSecIndexData() {
  // @@protoc_insertion_point(destructor:TransCatSerial.RoutesSecIndexData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutesSecIndexData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutesSecIndexData::ArenaDtor(void* object) {
  RoutesSecIndexData* _this = reinterpret_cast< RoutesSecIndexData* >(object);
  (void)_this;
}
void RoutesSecIndexData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutesSecIndexData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutesSecIndexData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.RoutesSecIndexData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sec_routes_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesSecIndexData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.RouteData sec_routes_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sec_routes_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutesSecIndexData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.RoutesSecIndexData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.RouteData sec_routes_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sec_routes_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sec_routes_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.RoutesSecIndexData)
  return target;
}

size_t RoutesSecIndexData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.RoutesSecIndexData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.RouteData sec_routes_data = 1;
  total_size += 1UL * this->_internal_sec_routes_data_size();
  for (const auto& msg : this->sec_routes_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutesSecIndexData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutesSecIndexData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutesSecIndexData::GetClassData() const { return &_class_data_; }

void RoutesSecIndexData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutesSecIndexData *>(to)->MergeFrom(
      static_cast<const RoutesSecIndexData &>(from));
}


void RoutesSecIndexData::MergeFrom(const RoutesSecIndexData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.RoutesSecIndexData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sec_routes_data_.MergeFrom(from.sec_routes_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutesSecIndexData::CopyFrom(const RoutesSecIndexData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.RoutesSecIndexData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesSecIndexData::IsInitialized() const {
  return true;
}

void RoutesSecIndexData::InternalSwap(RoutesSecIndexData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sec_routes_data_.InternalSwap(&other->sec_routes_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesSecIndexData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[5]);
}

// ===================================================================

class RoutesData::_Internal {
 public:
};

RoutesData::RoutesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  first_routes_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.RoutesData)
}
RoutesData::RoutesData(const RoutesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      first_routes_data_(from.first_routes_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.RoutesData)
}

inline void RoutesData::SharedCtor() {
}

RoutesData::~RoutesData() {
  // @@protoc_insertion_point(destructor:TransCatSerial.RoutesData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutesData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutesData::ArenaDtor(void* object) {
  RoutesData* _this = reinterpret_cast< RoutesData* >(object);
  (void)_this;
}
void RoutesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutesData::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.RoutesData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_routes_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.RoutesSecIndexData first_routes_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_routes_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutesData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.RoutesData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.RoutesSecIndexData first_routes_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_routes_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_first_routes_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.RoutesData)
  return target;
}

size_t RoutesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.RoutesData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.RoutesSecIndexData first_routes_data = 1;
  total_size += 1UL * this->_internal_first_routes_data_size();
  for (const auto& msg : this->first_routes_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutesData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutesData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutesData::GetClassData() const { return &_class_data_; }

void RoutesData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutesData *>(to)->MergeFrom(
      static_cast<const RoutesData &>(from));
}


void RoutesData::MergeFrom(const RoutesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.RoutesData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  first_routes_data_.MergeFrom(from.first_routes_data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutesData::CopyFrom(const RoutesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.RoutesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesData::IsInitialized() const {
  return true;
}

void RoutesData::InternalSwap(RoutesData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  first_routes_data_.InternalSwap(&other->first_routes_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TransCatSerial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TransCatSerial::Edge* Arena::CreateMaybeMessage< ::TransCatSerial::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::Edges* Arena::CreateMaybeMessage< ::TransCatSerial::Edges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::Edges >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::IncidenceList* Arena::CreateMaybeMessage< ::TransCatSerial::IncidenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::IncidenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::IncidenceLists* Arena::CreateMaybeMessage< ::TransCatSerial::IncidenceLists >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::IncidenceLists >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::RouteData* Arena::CreateMaybeMessage< ::TransCatSerial::RouteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::RouteData >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::RoutesSecIndexData* Arena::CreateMaybeMessage< ::TransCatSerial::RoutesSecIndexData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::RoutesSecIndexData >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::RoutesData* Arena::CreateMaybeMessage< ::TransCatSerial::RoutesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::RoutesData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
