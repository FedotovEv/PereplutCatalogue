// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TransCatSerial {
constexpr StopNameToVertex::StopNameToVertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_name_num_(0u)
  , vertex_id_(0u){}
struct StopNameToVertexDefaultTypeInternal {
  constexpr StopNameToVertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopNameToVertexDefaultTypeInternal() {}
  union {
    StopNameToVertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopNameToVertexDefaultTypeInternal _StopNameToVertex_default_instance_;
constexpr StopNameToVertexList::StopNameToVertexList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_name_to_vertex_(){}
struct StopNameToVertexListDefaultTypeInternal {
  constexpr StopNameToVertexListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopNameToVertexListDefaultTypeInternal() {}
  union {
    StopNameToVertexList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopNameToVertexListDefaultTypeInternal _StopNameToVertexList_default_instance_;
constexpr EdgeDescriptor::EdgeDescriptor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_type_(0)

  , from_stop_num_(0u)
  , to_stop_num_(0u)
  , bus_name_num_(0u)
  , time_length_(0)
  , span_count_(0u){}
struct EdgeDescriptorDefaultTypeInternal {
  constexpr EdgeDescriptorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeDescriptorDefaultTypeInternal() {}
  union {
    EdgeDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeDescriptorDefaultTypeInternal _EdgeDescriptor_default_instance_;
constexpr EdgeToDesc::EdgeToDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_descriptor_(nullptr)
  , edge_id_(0u){}
struct EdgeToDescDefaultTypeInternal {
  constexpr EdgeToDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeToDescDefaultTypeInternal() {}
  union {
    EdgeToDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeToDescDefaultTypeInternal _EdgeToDesc_default_instance_;
constexpr EdgeToDescList::EdgeToDescList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_to_desc_(){}
struct EdgeToDescListDefaultTypeInternal {
  constexpr EdgeToDescListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeToDescListDefaultTypeInternal() {}
  union {
    EdgeToDescList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeToDescListDefaultTypeInternal _EdgeToDescList_default_instance_;
constexpr Coordinates::Coordinates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lat_(0)
  , lng_(0){}
struct CoordinatesDefaultTypeInternal {
  constexpr CoordinatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordinatesDefaultTypeInternal() {}
  union {
    Coordinates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
constexpr DistanceToStop::DistanceToStop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , stop_num_(0u){}
struct DistanceToStopDefaultTypeInternal {
  constexpr DistanceToStopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceToStopDefaultTypeInternal() {}
  union {
    DistanceToStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceToStopDefaultTypeInternal _DistanceToStop_default_instance_;
constexpr Stop::Stop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buses_at_stop_()
  , _buses_at_stop_cached_byte_size_(0)
  , distance_to_stop_()
  , stop_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stop_coords_(nullptr)
  , stop_type_(0)
{}
struct StopDefaultTypeInternal {
  constexpr StopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopDefaultTypeInternal() {}
  union {
    Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopDefaultTypeInternal _Stop_default_instance_;
constexpr Bus::Bus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bus_stops_()
  , _bus_stops_cached_byte_size_(0)
  , bus_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bus_type_(0)
{}
struct BusDefaultTypeInternal {
  constexpr BusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusDefaultTypeInternal() {}
  union {
    Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusDefaultTypeInternal _Bus_default_instance_;
constexpr StopList::StopList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_(){}
struct StopListDefaultTypeInternal {
  constexpr StopListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopListDefaultTypeInternal() {}
  union {
    StopList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopListDefaultTypeInternal _StopList_default_instance_;
constexpr BusList::BusList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buses_(){}
struct BusListDefaultTypeInternal {
  constexpr BusListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusListDefaultTypeInternal() {}
  union {
    BusList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusListDefaultTypeInternal _BusList_default_instance_;
constexpr TransportCatalogue::TransportCatalogue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_(nullptr)
  , buses_(nullptr)
  , router_context_(nullptr)
  , render_context_(nullptr)
  , stop_name_to_enter_vertex_(nullptr)
  , stop_name_to_exit_vertex_(nullptr)
  , edge_to_desc_(nullptr)
  , edges_(nullptr)
  , incidence_lists_(nullptr)
  , routes_data_(nullptr)
  , is_routes_data_(false){}
struct TransportCatalogueDefaultTypeInternal {
  constexpr TransportCatalogueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace TransCatSerial
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalogue_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transport_5fcatalogue_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const uint32_t TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopNameToVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopNameToVertex, stop_name_num_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopNameToVertex, vertex_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopNameToVertexList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopNameToVertexList, stop_name_to_vertex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, edge_type_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, from_stop_num_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, to_stop_num_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, bus_name_num_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, span_count_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeDescriptor, time_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeToDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeToDesc, edge_id_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeToDesc, edge_descriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeToDescList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::EdgeToDescList, edge_to_desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Coordinates, lat_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Coordinates, lng_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::DistanceToStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::DistanceToStop, stop_num_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::DistanceToStop, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Stop, stop_type_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Stop, stop_name_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Stop, stop_coords_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Stop, buses_at_stop_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Stop, distance_to_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Bus, bus_type_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Bus, bus_name_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::Bus, bus_stops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::StopList, stops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::BusList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::BusList, buses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, stops_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, buses_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, router_context_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, render_context_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, is_routes_data_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, stop_name_to_enter_vertex_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, stop_name_to_exit_vertex_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, edge_to_desc_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, edges_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, incidence_lists_),
  PROTOBUF_FIELD_OFFSET(::TransCatSerial::TransportCatalogue, routes_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TransCatSerial::StopNameToVertex)},
  { 8, -1, -1, sizeof(::TransCatSerial::StopNameToVertexList)},
  { 15, -1, -1, sizeof(::TransCatSerial::EdgeDescriptor)},
  { 27, -1, -1, sizeof(::TransCatSerial::EdgeToDesc)},
  { 35, -1, -1, sizeof(::TransCatSerial::EdgeToDescList)},
  { 42, -1, -1, sizeof(::TransCatSerial::Coordinates)},
  { 50, -1, -1, sizeof(::TransCatSerial::DistanceToStop)},
  { 58, -1, -1, sizeof(::TransCatSerial::Stop)},
  { 69, -1, -1, sizeof(::TransCatSerial::Bus)},
  { 78, -1, -1, sizeof(::TransCatSerial::StopList)},
  { 85, -1, -1, sizeof(::TransCatSerial::BusList)},
  { 92, -1, -1, sizeof(::TransCatSerial::TransportCatalogue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_StopNameToVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_StopNameToVertexList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_EdgeDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_EdgeToDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_EdgeToDescList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_Coordinates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_DistanceToStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_Bus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_StopList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_BusList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TransCatSerial::_TransportCatalogue_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\016TransCatSer"
  "ial\032\022map_renderer.proto\032\013graph.proto\"<\n\020"
  "StopNameToVertex\022\025\n\rstop_name_num\030\001 \001(\r\022"
  "\021\n\tvertex_id\030\002 \001(\r\"U\n\024StopNameToVertexLi"
  "st\022=\n\023stop_name_to_vertex\030\001 \003(\0132 .TransC"
  "atSerial.StopNameToVertex\"\370\001\n\016EdgeDescri"
  "ptor\022:\n\tedge_type\030\001 \001(\0162\'.TransCatSerial"
  ".EdgeDescriptor.EdgeType\022\025\n\rfrom_stop_nu"
  "m\030\002 \001(\r\022\023\n\013to_stop_num\030\003 \001(\r\022\024\n\014bus_name"
  "_num\030\004 \001(\r\022\022\n\nspan_count\030\005 \001(\r\022\023\n\013time_l"
  "ength\030\006 \001(\001\"\?\n\010EdgeType\022\020\n\014EDGE_UNKNOWN\020"
  "\000\022\016\n\nEDGE_STAGE\020\001\022\021\n\rEDGE_TRANSFER\020\002\"V\n\n"
  "EdgeToDesc\022\017\n\007edge_id\030\001 \001(\r\0227\n\017edge_desc"
  "riptor\030\002 \001(\0132\036.TransCatSerial.EdgeDescri"
  "ptor\"B\n\016EdgeToDescList\0220\n\014edge_to_desc\030\001"
  " \003(\0132\032.TransCatSerial.EdgeToDesc\"\'\n\013Coor"
  "dinates\022\013\n\003lat\030\001 \001(\001\022\013\n\003lng\030\002 \001(\001\"4\n\016Dis"
  "tanceToStop\022\020\n\010stop_num\030\001 \001(\r\022\020\n\010distanc"
  "e\030\002 \001(\001\"\210\002\n\004Stop\0220\n\tstop_type\030\001 \001(\0162\035.Tr"
  "ansCatSerial.Stop.StopType\022\021\n\tstop_name\030"
  "\002 \001(\014\0220\n\013stop_coords\030\003 \001(\0132\033.TransCatSer"
  "ial.Coordinates\022\025\n\rbuses_at_stop\030\004 \003(\r\0228"
  "\n\020distance_to_stop\030\005 \003(\0132\036.TransCatSeria"
  "l.DistanceToStop\"8\n\010StopType\022\026\n\022STOPTYPE"
  "_UNDEFINED\020\000\022\024\n\020STOPTYPE_ORDINAR\020\001\"\246\001\n\003B"
  "us\022-\n\010bus_type\030\001 \001(\0162\033.TransCatSerial.Bu"
  "s.BusType\022\020\n\010bus_name\030\002 \001(\014\022\021\n\tbus_stops"
  "\030\003 \003(\r\"K\n\007BusType\022\025\n\021BUSTYPE_UNDEFINED\020\000"
  "\022\023\n\017BUSTYPE_ORDINAR\020\001\022\024\n\020BUSTYPE_CIRCULA"
  "R\020\002\"/\n\010StopList\022#\n\005stops\030\001 \003(\0132\024.TransCa"
  "tSerial.Stop\"-\n\007BusList\022\"\n\005buses\030\002 \003(\0132\023"
  ".TransCatSerial.Bus\"\307\004\n\022TransportCatalog"
  "ue\022\'\n\005stops\030\001 \001(\0132\030.TransCatSerial.StopL"
  "ist\022&\n\005buses\030\002 \001(\0132\027.TransCatSerial.BusL"
  "ist\0225\n\016router_context\030\003 \001(\0132\035.TransCatSe"
  "rial.RouterContext\022:\n\016render_context\030\004 \001"
  "(\0132\".TransCatSerial.MapRendererContext\022\026"
  "\n\016is_routes_data\030\005 \001(\010\022G\n\031stop_name_to_e"
  "nter_vertex\030\006 \001(\0132$.TransCatSerial.StopN"
  "ameToVertexList\022F\n\030stop_name_to_exit_ver"
  "tex\030\007 \001(\0132$.TransCatSerial.StopNameToVer"
  "texList\0224\n\014edge_to_desc\030\010 \001(\0132\036.TransCat"
  "Serial.EdgeToDescList\022$\n\005edges\030\t \001(\0132\025.T"
  "ransCatSerial.Edges\0227\n\017incidence_lists\030\n"
  " \001(\0132\036.TransCatSerial.IncidenceLists\022/\n\013"
  "routes_data\030\013 \001(\0132\032.TransCatSerial.Route"
  "sDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalogue_2eproto_deps[2] = {
  &::descriptor_table_graph_2eproto,
  &::descriptor_table_map_5frenderer_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
  false, false, 1853, descriptor_table_protodef_transport_5fcatalogue_2eproto, "transport_catalogue.proto", 
  &descriptor_table_transport_5fcatalogue_2eproto_once, descriptor_table_transport_5fcatalogue_2eproto_deps, 2, 12,
  schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
  file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto, file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace TransCatSerial {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EdgeDescriptor_EdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalogue_2eproto);
  return file_level_enum_descriptors_transport_5fcatalogue_2eproto[0];
}
bool EdgeDescriptor_EdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EdgeDescriptor_EdgeType EdgeDescriptor::EDGE_UNKNOWN;
constexpr EdgeDescriptor_EdgeType EdgeDescriptor::EDGE_STAGE;
constexpr EdgeDescriptor_EdgeType EdgeDescriptor::EDGE_TRANSFER;
constexpr EdgeDescriptor_EdgeType EdgeDescriptor::EdgeType_MIN;
constexpr EdgeDescriptor_EdgeType EdgeDescriptor::EdgeType_MAX;
constexpr int EdgeDescriptor::EdgeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stop_StopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalogue_2eproto);
  return file_level_enum_descriptors_transport_5fcatalogue_2eproto[1];
}
bool Stop_StopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Stop_StopType Stop::STOPTYPE_UNDEFINED;
constexpr Stop_StopType Stop::STOPTYPE_ORDINAR;
constexpr Stop_StopType Stop::StopType_MIN;
constexpr Stop_StopType Stop::StopType_MAX;
constexpr int Stop::StopType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bus_BusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalogue_2eproto);
  return file_level_enum_descriptors_transport_5fcatalogue_2eproto[2];
}
bool Bus_BusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Bus_BusType Bus::BUSTYPE_UNDEFINED;
constexpr Bus_BusType Bus::BUSTYPE_ORDINAR;
constexpr Bus_BusType Bus::BUSTYPE_CIRCULAR;
constexpr Bus_BusType Bus::BusType_MIN;
constexpr Bus_BusType Bus::BusType_MAX;
constexpr int Bus::BusType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StopNameToVertex::_Internal {
 public:
};

StopNameToVertex::StopNameToVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.StopNameToVertex)
}
StopNameToVertex::StopNameToVertex(const StopNameToVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stop_name_num_, &from.stop_name_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertex_id_) -
    reinterpret_cast<char*>(&stop_name_num_)) + sizeof(vertex_id_));
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.StopNameToVertex)
}

inline void StopNameToVertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_name_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vertex_id_) -
    reinterpret_cast<char*>(&stop_name_num_)) + sizeof(vertex_id_));
}

StopNameToVertex::~StopNameToVertex() {
  // @@protoc_insertion_point(destructor:TransCatSerial.StopNameToVertex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopNameToVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopNameToVertex::ArenaDtor(void* object) {
  StopNameToVertex* _this = reinterpret_cast< StopNameToVertex* >(object);
  (void)_this;
}
void StopNameToVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopNameToVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopNameToVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.StopNameToVertex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stop_name_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertex_id_) -
      reinterpret_cast<char*>(&stop_name_num_)) + sizeof(vertex_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopNameToVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stop_name_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          stop_name_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vertex_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          vertex_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopNameToVertex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.StopNameToVertex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop_name_num = 1;
  if (this->_internal_stop_name_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop_name_num(), target);
  }

  // uint32 vertex_id = 2;
  if (this->_internal_vertex_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vertex_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.StopNameToVertex)
  return target;
}

size_t StopNameToVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.StopNameToVertex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 stop_name_num = 1;
  if (this->_internal_stop_name_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_name_num());
  }

  // uint32 vertex_id = 2;
  if (this->_internal_vertex_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopNameToVertex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopNameToVertex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopNameToVertex::GetClassData() const { return &_class_data_; }

void StopNameToVertex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopNameToVertex *>(to)->MergeFrom(
      static_cast<const StopNameToVertex &>(from));
}


void StopNameToVertex::MergeFrom(const StopNameToVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.StopNameToVertex)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stop_name_num() != 0) {
    _internal_set_stop_name_num(from._internal_stop_name_num());
  }
  if (from._internal_vertex_id() != 0) {
    _internal_set_vertex_id(from._internal_vertex_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopNameToVertex::CopyFrom(const StopNameToVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.StopNameToVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopNameToVertex::IsInitialized() const {
  return true;
}

void StopNameToVertex::InternalSwap(StopNameToVertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopNameToVertex, vertex_id_)
      + sizeof(StopNameToVertex::vertex_id_)
      - PROTOBUF_FIELD_OFFSET(StopNameToVertex, stop_name_num_)>(
          reinterpret_cast<char*>(&stop_name_num_),
          reinterpret_cast<char*>(&other->stop_name_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopNameToVertex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class StopNameToVertexList::_Internal {
 public:
};

StopNameToVertexList::StopNameToVertexList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stop_name_to_vertex_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.StopNameToVertexList)
}
StopNameToVertexList::StopNameToVertexList(const StopNameToVertexList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stop_name_to_vertex_(from.stop_name_to_vertex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.StopNameToVertexList)
}

inline void StopNameToVertexList::SharedCtor() {
}

StopNameToVertexList::~StopNameToVertexList() {
  // @@protoc_insertion_point(destructor:TransCatSerial.StopNameToVertexList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopNameToVertexList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopNameToVertexList::ArenaDtor(void* object) {
  StopNameToVertexList* _this = reinterpret_cast< StopNameToVertexList* >(object);
  (void)_this;
}
void StopNameToVertexList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopNameToVertexList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopNameToVertexList::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.StopNameToVertexList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_name_to_vertex_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopNameToVertexList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.StopNameToVertex stop_name_to_vertex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_name_to_vertex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopNameToVertexList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.StopNameToVertexList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.StopNameToVertex stop_name_to_vertex = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stop_name_to_vertex_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stop_name_to_vertex(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.StopNameToVertexList)
  return target;
}

size_t StopNameToVertexList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.StopNameToVertexList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.StopNameToVertex stop_name_to_vertex = 1;
  total_size += 1UL * this->_internal_stop_name_to_vertex_size();
  for (const auto& msg : this->stop_name_to_vertex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopNameToVertexList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopNameToVertexList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopNameToVertexList::GetClassData() const { return &_class_data_; }

void StopNameToVertexList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopNameToVertexList *>(to)->MergeFrom(
      static_cast<const StopNameToVertexList &>(from));
}


void StopNameToVertexList::MergeFrom(const StopNameToVertexList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.StopNameToVertexList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stop_name_to_vertex_.MergeFrom(from.stop_name_to_vertex_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopNameToVertexList::CopyFrom(const StopNameToVertexList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.StopNameToVertexList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopNameToVertexList::IsInitialized() const {
  return true;
}

void StopNameToVertexList::InternalSwap(StopNameToVertexList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stop_name_to_vertex_.InternalSwap(&other->stop_name_to_vertex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopNameToVertexList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// ===================================================================

class EdgeDescriptor::_Internal {
 public:
};

EdgeDescriptor::EdgeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.EdgeDescriptor)
}
EdgeDescriptor::EdgeDescriptor(const EdgeDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&edge_type_, &from.edge_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
    reinterpret_cast<char*>(&edge_type_)) + sizeof(span_count_));
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.EdgeDescriptor)
}

inline void EdgeDescriptor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edge_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
    reinterpret_cast<char*>(&edge_type_)) + sizeof(span_count_));
}

EdgeDescriptor::~EdgeDescriptor() {
  // @@protoc_insertion_point(destructor:TransCatSerial.EdgeDescriptor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EdgeDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgeDescriptor::ArenaDtor(void* object) {
  EdgeDescriptor* _this = reinterpret_cast< EdgeDescriptor* >(object);
  (void)_this;
}
void EdgeDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.EdgeDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&edge_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&span_count_) -
      reinterpret_cast<char*>(&edge_type_)) + sizeof(span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TransCatSerial.EdgeDescriptor.EdgeType edge_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_type(static_cast<::TransCatSerial::EdgeDescriptor_EdgeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 from_stop_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          from_stop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_stop_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          to_stop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bus_name_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          bus_name_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 span_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          time_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.EdgeDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransCatSerial.EdgeDescriptor.EdgeType edge_type = 1;
  if (this->_internal_edge_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_edge_type(), target);
  }

  // uint32 from_stop_num = 2;
  if (this->_internal_from_stop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_stop_num(), target);
  }

  // uint32 to_stop_num = 3;
  if (this->_internal_to_stop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_to_stop_num(), target);
  }

  // uint32 bus_name_num = 4;
  if (this->_internal_bus_name_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bus_name_num(), target);
  }

  // uint32 span_count = 5;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_span_count(), target);
  }

  // double time_length = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_length = this->_internal_time_length();
  uint64_t raw_time_length;
  memcpy(&raw_time_length, &tmp_time_length, sizeof(tmp_time_length));
  if (raw_time_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_time_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.EdgeDescriptor)
  return target;
}

size_t EdgeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.EdgeDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransCatSerial.EdgeDescriptor.EdgeType edge_type = 1;
  if (this->_internal_edge_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_edge_type());
  }

  // uint32 from_stop_num = 2;
  if (this->_internal_from_stop_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_stop_num());
  }

  // uint32 to_stop_num = 3;
  if (this->_internal_to_stop_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_stop_num());
  }

  // uint32 bus_name_num = 4;
  if (this->_internal_bus_name_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_name_num());
  }

  // double time_length = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_length = this->_internal_time_length();
  uint64_t raw_time_length;
  memcpy(&raw_time_length, &tmp_time_length, sizeof(tmp_time_length));
  if (raw_time_length != 0) {
    total_size += 1 + 8;
  }

  // uint32 span_count = 5;
  if (this->_internal_span_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_span_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EdgeDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeDescriptor::GetClassData() const { return &_class_data_; }

void EdgeDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EdgeDescriptor *>(to)->MergeFrom(
      static_cast<const EdgeDescriptor &>(from));
}


void EdgeDescriptor::MergeFrom(const EdgeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.EdgeDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_edge_type() != 0) {
    _internal_set_edge_type(from._internal_edge_type());
  }
  if (from._internal_from_stop_num() != 0) {
    _internal_set_from_stop_num(from._internal_from_stop_num());
  }
  if (from._internal_to_stop_num() != 0) {
    _internal_set_to_stop_num(from._internal_to_stop_num());
  }
  if (from._internal_bus_name_num() != 0) {
    _internal_set_bus_name_num(from._internal_bus_name_num());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_length = from._internal_time_length();
  uint64_t raw_time_length;
  memcpy(&raw_time_length, &tmp_time_length, sizeof(tmp_time_length));
  if (raw_time_length != 0) {
    _internal_set_time_length(from._internal_time_length());
  }
  if (from._internal_span_count() != 0) {
    _internal_set_span_count(from._internal_span_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeDescriptor::CopyFrom(const EdgeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.EdgeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeDescriptor::IsInitialized() const {
  return true;
}

void EdgeDescriptor::InternalSwap(EdgeDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeDescriptor, span_count_)
      + sizeof(EdgeDescriptor::span_count_)
      - PROTOBUF_FIELD_OFFSET(EdgeDescriptor, edge_type_)>(
          reinterpret_cast<char*>(&edge_type_),
          reinterpret_cast<char*>(&other->edge_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeDescriptor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[2]);
}

// ===================================================================

class EdgeToDesc::_Internal {
 public:
  static const ::TransCatSerial::EdgeDescriptor& edge_descriptor(const EdgeToDesc* msg);
};

const ::TransCatSerial::EdgeDescriptor&
EdgeToDesc::_Internal::edge_descriptor(const EdgeToDesc* msg) {
  return *msg->edge_descriptor_;
}
EdgeToDesc::EdgeToDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.EdgeToDesc)
}
EdgeToDesc::EdgeToDesc(const EdgeToDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edge_descriptor()) {
    edge_descriptor_ = new ::TransCatSerial::EdgeDescriptor(*from.edge_descriptor_);
  } else {
    edge_descriptor_ = nullptr;
  }
  edge_id_ = from.edge_id_;
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.EdgeToDesc)
}

inline void EdgeToDesc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edge_descriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&edge_id_) -
    reinterpret_cast<char*>(&edge_descriptor_)) + sizeof(edge_id_));
}

EdgeToDesc::~EdgeToDesc() {
  // @@protoc_insertion_point(destructor:TransCatSerial.EdgeToDesc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EdgeToDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete edge_descriptor_;
}

void EdgeToDesc::ArenaDtor(void* object) {
  EdgeToDesc* _this = reinterpret_cast< EdgeToDesc* >(object);
  (void)_this;
}
void EdgeToDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeToDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgeToDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.EdgeToDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && edge_descriptor_ != nullptr) {
    delete edge_descriptor_;
  }
  edge_descriptor_ = nullptr;
  edge_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeToDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 edge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          edge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.EdgeDescriptor edge_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_descriptor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeToDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.EdgeToDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 edge_id = 1;
  if (this->_internal_edge_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edge_id(), target);
  }

  // .TransCatSerial.EdgeDescriptor edge_descriptor = 2;
  if (this->_internal_has_edge_descriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edge_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.EdgeToDesc)
  return target;
}

size_t EdgeToDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.EdgeToDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransCatSerial.EdgeDescriptor edge_descriptor = 2;
  if (this->_internal_has_edge_descriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_descriptor_);
  }

  // uint32 edge_id = 1;
  if (this->_internal_edge_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_edge_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeToDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EdgeToDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeToDesc::GetClassData() const { return &_class_data_; }

void EdgeToDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EdgeToDesc *>(to)->MergeFrom(
      static_cast<const EdgeToDesc &>(from));
}


void EdgeToDesc::MergeFrom(const EdgeToDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.EdgeToDesc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_edge_descriptor()) {
    _internal_mutable_edge_descriptor()->::TransCatSerial::EdgeDescriptor::MergeFrom(from._internal_edge_descriptor());
  }
  if (from._internal_edge_id() != 0) {
    _internal_set_edge_id(from._internal_edge_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeToDesc::CopyFrom(const EdgeToDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.EdgeToDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeToDesc::IsInitialized() const {
  return true;
}

void EdgeToDesc::InternalSwap(EdgeToDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeToDesc, edge_id_)
      + sizeof(EdgeToDesc::edge_id_)
      - PROTOBUF_FIELD_OFFSET(EdgeToDesc, edge_descriptor_)>(
          reinterpret_cast<char*>(&edge_descriptor_),
          reinterpret_cast<char*>(&other->edge_descriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeToDesc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[3]);
}

// ===================================================================

class EdgeToDescList::_Internal {
 public:
};

EdgeToDescList::EdgeToDescList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  edge_to_desc_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.EdgeToDescList)
}
EdgeToDescList::EdgeToDescList(const EdgeToDescList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_to_desc_(from.edge_to_desc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.EdgeToDescList)
}

inline void EdgeToDescList::SharedCtor() {
}

EdgeToDescList::~EdgeToDescList() {
  // @@protoc_insertion_point(destructor:TransCatSerial.EdgeToDescList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EdgeToDescList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgeToDescList::ArenaDtor(void* object) {
  EdgeToDescList* _this = reinterpret_cast< EdgeToDescList* >(object);
  (void)_this;
}
void EdgeToDescList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeToDescList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgeToDescList::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.EdgeToDescList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_to_desc_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeToDescList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.EdgeToDesc edge_to_desc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge_to_desc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeToDescList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.EdgeToDescList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.EdgeToDesc edge_to_desc = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_to_desc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edge_to_desc(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.EdgeToDescList)
  return target;
}

size_t EdgeToDescList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.EdgeToDescList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.EdgeToDesc edge_to_desc = 1;
  total_size += 1UL * this->_internal_edge_to_desc_size();
  for (const auto& msg : this->edge_to_desc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeToDescList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EdgeToDescList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeToDescList::GetClassData() const { return &_class_data_; }

void EdgeToDescList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EdgeToDescList *>(to)->MergeFrom(
      static_cast<const EdgeToDescList &>(from));
}


void EdgeToDescList::MergeFrom(const EdgeToDescList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.EdgeToDescList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  edge_to_desc_.MergeFrom(from.edge_to_desc_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeToDescList::CopyFrom(const EdgeToDescList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.EdgeToDescList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeToDescList::IsInitialized() const {
  return true;
}

void EdgeToDescList::InternalSwap(EdgeToDescList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  edge_to_desc_.InternalSwap(&other->edge_to_desc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeToDescList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[4]);
}

// ===================================================================

class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.Coordinates)
}

inline void Coordinates::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:TransCatSerial.Coordinates)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coordinates::ArenaDtor(void* object) {
  Coordinates* _this = reinterpret_cast< Coordinates* >(object);
  (void)_this;
}
void Coordinates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.Coordinates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coordinates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.Coordinates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = this->_internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.Coordinates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = this->_internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coordinates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Coordinates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coordinates::GetClassData() const { return &_class_data_; }

void Coordinates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Coordinates *>(to)->MergeFrom(
      static_cast<const Coordinates &>(from));
}


void Coordinates::MergeFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = from._internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    _internal_set_lat(from._internal_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = from._internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    _internal_set_lng(from._internal_lng());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, lng_)
      + sizeof(Coordinates::lng_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[5]);
}

// ===================================================================

class DistanceToStop::_Internal {
 public:
};

DistanceToStop::DistanceToStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.DistanceToStop)
}
DistanceToStop::DistanceToStop(const DistanceToStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_num_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(stop_num_));
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.DistanceToStop)
}

inline void DistanceToStop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_num_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(stop_num_));
}

DistanceToStop::~DistanceToStop() {
  // @@protoc_insertion_point(destructor:TransCatSerial.DistanceToStop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DistanceToStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistanceToStop::ArenaDtor(void* object) {
  DistanceToStop* _this = reinterpret_cast< DistanceToStop* >(object);
  (void)_this;
}
void DistanceToStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceToStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistanceToStop::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.DistanceToStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_num_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(stop_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceToStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stop_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          stop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistanceToStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.DistanceToStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop_num = 1;
  if (this->_internal_stop_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop_num(), target);
  }

  // double distance = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.DistanceToStop)
  return target;
}

size_t DistanceToStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.DistanceToStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double distance = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  // uint32 stop_num = 1;
  if (this->_internal_stop_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistanceToStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistanceToStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistanceToStop::GetClassData() const { return &_class_data_; }

void DistanceToStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistanceToStop *>(to)->MergeFrom(
      static_cast<const DistanceToStop &>(from));
}


void DistanceToStop::MergeFrom(const DistanceToStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.DistanceToStop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _internal_set_distance(from._internal_distance());
  }
  if (from._internal_stop_num() != 0) {
    _internal_set_stop_num(from._internal_stop_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceToStop::CopyFrom(const DistanceToStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.DistanceToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceToStop::IsInitialized() const {
  return true;
}

void DistanceToStop::InternalSwap(DistanceToStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceToStop, stop_num_)
      + sizeof(DistanceToStop::stop_num_)
      - PROTOBUF_FIELD_OFFSET(DistanceToStop, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceToStop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[6]);
}

// ===================================================================

class Stop::_Internal {
 public:
  static const ::TransCatSerial::Coordinates& stop_coords(const Stop* msg);
};

const ::TransCatSerial::Coordinates&
Stop::_Internal::stop_coords(const Stop* msg) {
  return *msg->stop_coords_;
}
Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buses_at_stop_(arena),
  distance_to_stop_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buses_at_stop_(from.buses_at_stop_),
      distance_to_stop_(from.distance_to_stop_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_name().empty()) {
    stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stop_coords()) {
    stop_coords_ = new ::TransCatSerial::Coordinates(*from.stop_coords_);
  } else {
    stop_coords_ = nullptr;
  }
  stop_type_ = from.stop_type_;
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.Stop)
}

inline void Stop::SharedCtor() {
stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_coords_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_type_) -
    reinterpret_cast<char*>(&stop_coords_)) + sizeof(stop_type_));
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:TransCatSerial.Stop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stop_coords_;
}

void Stop::ArenaDtor(void* object) {
  Stop* _this = reinterpret_cast< Stop* >(object);
  (void)_this;
}
void Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.Stop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buses_at_stop_.Clear();
  distance_to_stop_.Clear();
  stop_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stop_coords_ != nullptr) {
    delete stop_coords_;
  }
  stop_coords_ = nullptr;
  stop_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TransCatSerial.Stop.StopType stop_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stop_type(static_cast<::TransCatSerial::Stop_StopType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes stop_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.Coordinates stop_coords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_coords(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 buses_at_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_buses_at_stop(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_buses_at_stop(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TransCatSerial.DistanceToStop distance_to_stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distance_to_stop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.Stop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransCatSerial.Stop.StopType stop_type = 1;
  if (this->_internal_stop_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stop_type(), target);
  }

  // bytes stop_name = 2;
  if (!this->_internal_stop_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stop_name(), target);
  }

  // .TransCatSerial.Coordinates stop_coords = 3;
  if (this->_internal_has_stop_coords()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stop_coords(this), target, stream);
  }

  // repeated uint32 buses_at_stop = 4;
  {
    int byte_size = _buses_at_stop_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_buses_at_stop(), byte_size, target);
    }
  }

  // repeated .TransCatSerial.DistanceToStop distance_to_stop = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distance_to_stop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_distance_to_stop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.Stop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 buses_at_stop = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->buses_at_stop_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buses_at_stop_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .TransCatSerial.DistanceToStop distance_to_stop = 5;
  total_size += 1UL * this->_internal_distance_to_stop_size();
  for (const auto& msg : this->distance_to_stop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes stop_name = 2;
  if (!this->_internal_stop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stop_name());
  }

  // .TransCatSerial.Coordinates stop_coords = 3;
  if (this->_internal_has_stop_coords()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_coords_);
  }

  // .TransCatSerial.Stop.StopType stop_type = 1;
  if (this->_internal_stop_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stop_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Stop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stop::GetClassData() const { return &_class_data_; }

void Stop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Stop *>(to)->MergeFrom(
      static_cast<const Stop &>(from));
}


void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  buses_at_stop_.MergeFrom(from.buses_at_stop_);
  distance_to_stop_.MergeFrom(from.distance_to_stop_);
  if (!from._internal_stop_name().empty()) {
    _internal_set_stop_name(from._internal_stop_name());
  }
  if (from._internal_has_stop_coords()) {
    _internal_mutable_stop_coords()->::TransCatSerial::Coordinates::MergeFrom(from._internal_stop_coords());
  }
  if (from._internal_stop_type() != 0) {
    _internal_set_stop_type(from._internal_stop_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buses_at_stop_.InternalSwap(&other->buses_at_stop_);
  distance_to_stop_.InternalSwap(&other->distance_to_stop_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stop_name_, lhs_arena,
      &other->stop_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stop, stop_type_)
      + sizeof(Stop::stop_type_)
      - PROTOBUF_FIELD_OFFSET(Stop, stop_coords_)>(
          reinterpret_cast<char*>(&stop_coords_),
          reinterpret_cast<char*>(&other->stop_coords_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[7]);
}

// ===================================================================

class Bus::_Internal {
 public:
};

Bus::Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bus_stops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bus_stops_(from.bus_stops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bus_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_name().empty()) {
    bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bus_name(), 
      GetArenaForAllocation());
  }
  bus_type_ = from.bus_type_;
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.Bus)
}

inline void Bus::SharedCtor() {
bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bus_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bus_type_ = 0;
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:TransCatSerial.Bus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bus_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bus::ArenaDtor(void* object) {
  Bus* _this = reinterpret_cast< Bus* >(object);
  (void)_this;
}
void Bus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.Bus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_stops_.Clear();
  bus_name_.ClearToEmpty();
  bus_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TransCatSerial.Bus.BusType bus_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bus_type(static_cast<::TransCatSerial::Bus_BusType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes bus_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bus_stops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bus_stops(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_bus_stops(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.Bus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransCatSerial.Bus.BusType bus_type = 1;
  if (this->_internal_bus_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bus_type(), target);
  }

  // bytes bus_name = 2;
  if (!this->_internal_bus_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bus_name(), target);
  }

  // repeated uint32 bus_stops = 3;
  {
    int byte_size = _bus_stops_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_bus_stops(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.Bus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bus_stops = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bus_stops_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bus_stops_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes bus_name = 2;
  if (!this->_internal_bus_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bus_name());
  }

  // .TransCatSerial.Bus.BusType bus_type = 1;
  if (this->_internal_bus_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bus_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bus::GetClassData() const { return &_class_data_; }

void Bus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bus *>(to)->MergeFrom(
      static_cast<const Bus &>(from));
}


void Bus::MergeFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bus_stops_.MergeFrom(from.bus_stops_);
  if (!from._internal_bus_name().empty()) {
    _internal_set_bus_name(from._internal_bus_name());
  }
  if (from._internal_bus_type() != 0) {
    _internal_set_bus_type(from._internal_bus_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bus_stops_.InternalSwap(&other->bus_stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bus_name_, lhs_arena,
      &other->bus_name_, rhs_arena
  );
  swap(bus_type_, other->bus_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[8]);
}

// ===================================================================

class StopList::_Internal {
 public:
};

StopList::StopList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.StopList)
}
StopList::StopList(const StopList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.StopList)
}

inline void StopList::SharedCtor() {
}

StopList::~StopList() {
  // @@protoc_insertion_point(destructor:TransCatSerial.StopList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopList::ArenaDtor(void* object) {
  StopList* _this = reinterpret_cast< StopList* >(object);
  (void)_this;
}
void StopList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopList::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.StopList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.Stop stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.StopList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.Stop stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.StopList)
  return target;
}

size_t StopList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.StopList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.Stop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopList::GetClassData() const { return &_class_data_; }

void StopList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopList *>(to)->MergeFrom(
      static_cast<const StopList &>(from));
}


void StopList::MergeFrom(const StopList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.StopList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopList::CopyFrom(const StopList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.StopList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopList::IsInitialized() const {
  return true;
}

void StopList::InternalSwap(StopList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[9]);
}

// ===================================================================

class BusList::_Internal {
 public:
};

BusList::BusList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  buses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.BusList)
}
BusList::BusList(const BusList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buses_(from.buses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.BusList)
}

inline void BusList::SharedCtor() {
}

BusList::~BusList() {
  // @@protoc_insertion_point(destructor:TransCatSerial.BusList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BusList::ArenaDtor(void* object) {
  BusList* _this = reinterpret_cast< BusList* >(object);
  (void)_this;
}
void BusList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusList::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.BusList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TransCatSerial.Bus buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BusList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.BusList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TransCatSerial.Bus buses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.BusList)
  return target;
}

size_t BusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.BusList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TransCatSerial.Bus buses = 2;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusList::GetClassData() const { return &_class_data_; }

void BusList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BusList *>(to)->MergeFrom(
      static_cast<const BusList &>(from));
}


void BusList::MergeFrom(const BusList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.BusList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  buses_.MergeFrom(from.buses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusList::CopyFrom(const BusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.BusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusList::IsInitialized() const {
  return true;
}

void BusList::InternalSwap(BusList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  buses_.InternalSwap(&other->buses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[10]);
}

// ===================================================================

class TransportCatalogue::_Internal {
 public:
  static const ::TransCatSerial::StopList& stops(const TransportCatalogue* msg);
  static const ::TransCatSerial::BusList& buses(const TransportCatalogue* msg);
  static const ::TransCatSerial::RouterContext& router_context(const TransportCatalogue* msg);
  static const ::TransCatSerial::MapRendererContext& render_context(const TransportCatalogue* msg);
  static const ::TransCatSerial::StopNameToVertexList& stop_name_to_enter_vertex(const TransportCatalogue* msg);
  static const ::TransCatSerial::StopNameToVertexList& stop_name_to_exit_vertex(const TransportCatalogue* msg);
  static const ::TransCatSerial::EdgeToDescList& edge_to_desc(const TransportCatalogue* msg);
  static const ::TransCatSerial::Edges& edges(const TransportCatalogue* msg);
  static const ::TransCatSerial::IncidenceLists& incidence_lists(const TransportCatalogue* msg);
  static const ::TransCatSerial::RoutesData& routes_data(const TransportCatalogue* msg);
};

const ::TransCatSerial::StopList&
TransportCatalogue::_Internal::stops(const TransportCatalogue* msg) {
  return *msg->stops_;
}
const ::TransCatSerial::BusList&
TransportCatalogue::_Internal::buses(const TransportCatalogue* msg) {
  return *msg->buses_;
}
const ::TransCatSerial::RouterContext&
TransportCatalogue::_Internal::router_context(const TransportCatalogue* msg) {
  return *msg->router_context_;
}
const ::TransCatSerial::MapRendererContext&
TransportCatalogue::_Internal::render_context(const TransportCatalogue* msg) {
  return *msg->render_context_;
}
const ::TransCatSerial::StopNameToVertexList&
TransportCatalogue::_Internal::stop_name_to_enter_vertex(const TransportCatalogue* msg) {
  return *msg->stop_name_to_enter_vertex_;
}
const ::TransCatSerial::StopNameToVertexList&
TransportCatalogue::_Internal::stop_name_to_exit_vertex(const TransportCatalogue* msg) {
  return *msg->stop_name_to_exit_vertex_;
}
const ::TransCatSerial::EdgeToDescList&
TransportCatalogue::_Internal::edge_to_desc(const TransportCatalogue* msg) {
  return *msg->edge_to_desc_;
}
const ::TransCatSerial::Edges&
TransportCatalogue::_Internal::edges(const TransportCatalogue* msg) {
  return *msg->edges_;
}
const ::TransCatSerial::IncidenceLists&
TransportCatalogue::_Internal::incidence_lists(const TransportCatalogue* msg) {
  return *msg->incidence_lists_;
}
const ::TransCatSerial::RoutesData&
TransportCatalogue::_Internal::routes_data(const TransportCatalogue* msg) {
  return *msg->routes_data_;
}
void TransportCatalogue::clear_router_context() {
  if (GetArenaForAllocation() == nullptr && router_context_ != nullptr) {
    delete router_context_;
  }
  router_context_ = nullptr;
}
void TransportCatalogue::clear_render_context() {
  if (GetArenaForAllocation() == nullptr && render_context_ != nullptr) {
    delete render_context_;
  }
  render_context_ = nullptr;
}
void TransportCatalogue::clear_edges() {
  if (GetArenaForAllocation() == nullptr && edges_ != nullptr) {
    delete edges_;
  }
  edges_ = nullptr;
}
void TransportCatalogue::clear_incidence_lists() {
  if (GetArenaForAllocation() == nullptr && incidence_lists_ != nullptr) {
    delete incidence_lists_;
  }
  incidence_lists_ = nullptr;
}
void TransportCatalogue::clear_routes_data() {
  if (GetArenaForAllocation() == nullptr && routes_data_ != nullptr) {
    delete routes_data_;
  }
  routes_data_ = nullptr;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TransCatSerial.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stops()) {
    stops_ = new ::TransCatSerial::StopList(*from.stops_);
  } else {
    stops_ = nullptr;
  }
  if (from._internal_has_buses()) {
    buses_ = new ::TransCatSerial::BusList(*from.buses_);
  } else {
    buses_ = nullptr;
  }
  if (from._internal_has_router_context()) {
    router_context_ = new ::TransCatSerial::RouterContext(*from.router_context_);
  } else {
    router_context_ = nullptr;
  }
  if (from._internal_has_render_context()) {
    render_context_ = new ::TransCatSerial::MapRendererContext(*from.render_context_);
  } else {
    render_context_ = nullptr;
  }
  if (from._internal_has_stop_name_to_enter_vertex()) {
    stop_name_to_enter_vertex_ = new ::TransCatSerial::StopNameToVertexList(*from.stop_name_to_enter_vertex_);
  } else {
    stop_name_to_enter_vertex_ = nullptr;
  }
  if (from._internal_has_stop_name_to_exit_vertex()) {
    stop_name_to_exit_vertex_ = new ::TransCatSerial::StopNameToVertexList(*from.stop_name_to_exit_vertex_);
  } else {
    stop_name_to_exit_vertex_ = nullptr;
  }
  if (from._internal_has_edge_to_desc()) {
    edge_to_desc_ = new ::TransCatSerial::EdgeToDescList(*from.edge_to_desc_);
  } else {
    edge_to_desc_ = nullptr;
  }
  if (from._internal_has_edges()) {
    edges_ = new ::TransCatSerial::Edges(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  if (from._internal_has_incidence_lists()) {
    incidence_lists_ = new ::TransCatSerial::IncidenceLists(*from.incidence_lists_);
  } else {
    incidence_lists_ = nullptr;
  }
  if (from._internal_has_routes_data()) {
    routes_data_ = new ::TransCatSerial::RoutesData(*from.routes_data_);
  } else {
    routes_data_ = nullptr;
  }
  is_routes_data_ = from.is_routes_data_;
  // @@protoc_insertion_point(copy_constructor:TransCatSerial.TransportCatalogue)
}

inline void TransportCatalogue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stops_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_routes_data_) -
    reinterpret_cast<char*>(&stops_)) + sizeof(is_routes_data_));
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:TransCatSerial.TransportCatalogue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete stops_;
  if (this != internal_default_instance()) delete buses_;
  if (this != internal_default_instance()) delete router_context_;
  if (this != internal_default_instance()) delete render_context_;
  if (this != internal_default_instance()) delete stop_name_to_enter_vertex_;
  if (this != internal_default_instance()) delete stop_name_to_exit_vertex_;
  if (this != internal_default_instance()) delete edge_to_desc_;
  if (this != internal_default_instance()) delete edges_;
  if (this != internal_default_instance()) delete incidence_lists_;
  if (this != internal_default_instance()) delete routes_data_;
}

void TransportCatalogue::ArenaDtor(void* object) {
  TransportCatalogue* _this = reinterpret_cast< TransportCatalogue* >(object);
  (void)_this;
}
void TransportCatalogue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalogue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:TransCatSerial.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && stops_ != nullptr) {
    delete stops_;
  }
  stops_ = nullptr;
  if (GetArenaForAllocation() == nullptr && buses_ != nullptr) {
    delete buses_;
  }
  buses_ = nullptr;
  if (GetArenaForAllocation() == nullptr && router_context_ != nullptr) {
    delete router_context_;
  }
  router_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && render_context_ != nullptr) {
    delete render_context_;
  }
  render_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stop_name_to_enter_vertex_ != nullptr) {
    delete stop_name_to_enter_vertex_;
  }
  stop_name_to_enter_vertex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stop_name_to_exit_vertex_ != nullptr) {
    delete stop_name_to_exit_vertex_;
  }
  stop_name_to_exit_vertex_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edge_to_desc_ != nullptr) {
    delete edge_to_desc_;
  }
  edge_to_desc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edges_ != nullptr) {
    delete edges_;
  }
  edges_ = nullptr;
  if (GetArenaForAllocation() == nullptr && incidence_lists_ != nullptr) {
    delete incidence_lists_;
  }
  incidence_lists_ = nullptr;
  if (GetArenaForAllocation() == nullptr && routes_data_ != nullptr) {
    delete routes_data_;
  }
  routes_data_ = nullptr;
  is_routes_data_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TransCatSerial.StopList stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stops(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.BusList buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_buses(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.RouterContext router_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.MapRendererContext render_context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_routes_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_routes_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.StopNameToVertexList stop_name_to_enter_vertex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_name_to_enter_vertex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.StopNameToVertexList stop_name_to_exit_vertex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_name_to_exit_vertex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.EdgeToDescList edge_to_desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_to_desc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.Edges edges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.IncidenceLists incidence_lists = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_incidence_lists(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TransCatSerial.RoutesData routes_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_routes_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportCatalogue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransCatSerial.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TransCatSerial.StopList stops = 1;
  if (this->_internal_has_stops()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stops(this), target, stream);
  }

  // .TransCatSerial.BusList buses = 2;
  if (this->_internal_has_buses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::buses(this), target, stream);
  }

  // .TransCatSerial.RouterContext router_context = 3;
  if (this->_internal_has_router_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router_context(this), target, stream);
  }

  // .TransCatSerial.MapRendererContext render_context = 4;
  if (this->_internal_has_render_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::render_context(this), target, stream);
  }

  // bool is_routes_data = 5;
  if (this->_internal_is_routes_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_routes_data(), target);
  }

  // .TransCatSerial.StopNameToVertexList stop_name_to_enter_vertex = 6;
  if (this->_internal_has_stop_name_to_enter_vertex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stop_name_to_enter_vertex(this), target, stream);
  }

  // .TransCatSerial.StopNameToVertexList stop_name_to_exit_vertex = 7;
  if (this->_internal_has_stop_name_to_exit_vertex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stop_name_to_exit_vertex(this), target, stream);
  }

  // .TransCatSerial.EdgeToDescList edge_to_desc = 8;
  if (this->_internal_has_edge_to_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::edge_to_desc(this), target, stream);
  }

  // .TransCatSerial.Edges edges = 9;
  if (this->_internal_has_edges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::edges(this), target, stream);
  }

  // .TransCatSerial.IncidenceLists incidence_lists = 10;
  if (this->_internal_has_incidence_lists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::incidence_lists(this), target, stream);
  }

  // .TransCatSerial.RoutesData routes_data = 11;
  if (this->_internal_has_routes_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::routes_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransCatSerial.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransCatSerial.TransportCatalogue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TransCatSerial.StopList stops = 1;
  if (this->_internal_has_stops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stops_);
  }

  // .TransCatSerial.BusList buses = 2;
  if (this->_internal_has_buses()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buses_);
  }

  // .TransCatSerial.RouterContext router_context = 3;
  if (this->_internal_has_router_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_context_);
  }

  // .TransCatSerial.MapRendererContext render_context = 4;
  if (this->_internal_has_render_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *render_context_);
  }

  // .TransCatSerial.StopNameToVertexList stop_name_to_enter_vertex = 6;
  if (this->_internal_has_stop_name_to_enter_vertex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_name_to_enter_vertex_);
  }

  // .TransCatSerial.StopNameToVertexList stop_name_to_exit_vertex = 7;
  if (this->_internal_has_stop_name_to_exit_vertex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_name_to_exit_vertex_);
  }

  // .TransCatSerial.EdgeToDescList edge_to_desc = 8;
  if (this->_internal_has_edge_to_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_to_desc_);
  }

  // .TransCatSerial.Edges edges = 9;
  if (this->_internal_has_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  // .TransCatSerial.IncidenceLists incidence_lists = 10;
  if (this->_internal_has_incidence_lists()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *incidence_lists_);
  }

  // .TransCatSerial.RoutesData routes_data = 11;
  if (this->_internal_has_routes_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routes_data_);
  }

  // bool is_routes_data = 5;
  if (this->_internal_is_routes_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalogue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransportCatalogue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalogue::GetClassData() const { return &_class_data_; }

void TransportCatalogue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransportCatalogue *>(to)->MergeFrom(
      static_cast<const TransportCatalogue &>(from));
}


void TransportCatalogue::MergeFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransCatSerial.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stops()) {
    _internal_mutable_stops()->::TransCatSerial::StopList::MergeFrom(from._internal_stops());
  }
  if (from._internal_has_buses()) {
    _internal_mutable_buses()->::TransCatSerial::BusList::MergeFrom(from._internal_buses());
  }
  if (from._internal_has_router_context()) {
    _internal_mutable_router_context()->::TransCatSerial::RouterContext::MergeFrom(from._internal_router_context());
  }
  if (from._internal_has_render_context()) {
    _internal_mutable_render_context()->::TransCatSerial::MapRendererContext::MergeFrom(from._internal_render_context());
  }
  if (from._internal_has_stop_name_to_enter_vertex()) {
    _internal_mutable_stop_name_to_enter_vertex()->::TransCatSerial::StopNameToVertexList::MergeFrom(from._internal_stop_name_to_enter_vertex());
  }
  if (from._internal_has_stop_name_to_exit_vertex()) {
    _internal_mutable_stop_name_to_exit_vertex()->::TransCatSerial::StopNameToVertexList::MergeFrom(from._internal_stop_name_to_exit_vertex());
  }
  if (from._internal_has_edge_to_desc()) {
    _internal_mutable_edge_to_desc()->::TransCatSerial::EdgeToDescList::MergeFrom(from._internal_edge_to_desc());
  }
  if (from._internal_has_edges()) {
    _internal_mutable_edges()->::TransCatSerial::Edges::MergeFrom(from._internal_edges());
  }
  if (from._internal_has_incidence_lists()) {
    _internal_mutable_incidence_lists()->::TransCatSerial::IncidenceLists::MergeFrom(from._internal_incidence_lists());
  }
  if (from._internal_has_routes_data()) {
    _internal_mutable_routes_data()->::TransCatSerial::RoutesData::MergeFrom(from._internal_routes_data());
  }
  if (from._internal_is_routes_data() != 0) {
    _internal_set_is_routes_data(from._internal_is_routes_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransCatSerial.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, is_routes_data_)
      + sizeof(TransportCatalogue::is_routes_data_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, stops_)>(
          reinterpret_cast<char*>(&stops_),
          reinterpret_cast<char*>(&other->stops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TransCatSerial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TransCatSerial::StopNameToVertex* Arena::CreateMaybeMessage< ::TransCatSerial::StopNameToVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::StopNameToVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::StopNameToVertexList* Arena::CreateMaybeMessage< ::TransCatSerial::StopNameToVertexList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::StopNameToVertexList >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::EdgeDescriptor* Arena::CreateMaybeMessage< ::TransCatSerial::EdgeDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::EdgeDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::EdgeToDesc* Arena::CreateMaybeMessage< ::TransCatSerial::EdgeToDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::EdgeToDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::EdgeToDescList* Arena::CreateMaybeMessage< ::TransCatSerial::EdgeToDescList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::EdgeToDescList >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::Coordinates* Arena::CreateMaybeMessage< ::TransCatSerial::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::DistanceToStop* Arena::CreateMaybeMessage< ::TransCatSerial::DistanceToStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::DistanceToStop >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::Stop* Arena::CreateMaybeMessage< ::TransCatSerial::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::Bus* Arena::CreateMaybeMessage< ::TransCatSerial::Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::StopList* Arena::CreateMaybeMessage< ::TransCatSerial::StopList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::StopList >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::BusList* Arena::CreateMaybeMessage< ::TransCatSerial::BusList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::BusList >(arena);
}
template<> PROTOBUF_NOINLINE ::TransCatSerial::TransportCatalogue* Arena::CreateMaybeMessage< ::TransCatSerial::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TransCatSerial::TransportCatalogue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
