// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace TransCatSerial {
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Edges;
struct EdgesDefaultTypeInternal;
extern EdgesDefaultTypeInternal _Edges_default_instance_;
class IncidenceList;
struct IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class IncidenceLists;
struct IncidenceListsDefaultTypeInternal;
extern IncidenceListsDefaultTypeInternal _IncidenceLists_default_instance_;
class RouteData;
struct RouteDataDefaultTypeInternal;
extern RouteDataDefaultTypeInternal _RouteData_default_instance_;
class RoutesData;
struct RoutesDataDefaultTypeInternal;
extern RoutesDataDefaultTypeInternal _RoutesData_default_instance_;
class RoutesSecIndexData;
struct RoutesSecIndexDataDefaultTypeInternal;
extern RoutesSecIndexDataDefaultTypeInternal _RoutesSecIndexData_default_instance_;
}  // namespace TransCatSerial
PROTOBUF_NAMESPACE_OPEN
template<> ::TransCatSerial::Edge* Arena::CreateMaybeMessage<::TransCatSerial::Edge>(Arena*);
template<> ::TransCatSerial::Edges* Arena::CreateMaybeMessage<::TransCatSerial::Edges>(Arena*);
template<> ::TransCatSerial::IncidenceList* Arena::CreateMaybeMessage<::TransCatSerial::IncidenceList>(Arena*);
template<> ::TransCatSerial::IncidenceLists* Arena::CreateMaybeMessage<::TransCatSerial::IncidenceLists>(Arena*);
template<> ::TransCatSerial::RouteData* Arena::CreateMaybeMessage<::TransCatSerial::RouteData>(Arena*);
template<> ::TransCatSerial::RoutesData* Arena::CreateMaybeMessage<::TransCatSerial::RoutesData>(Arena*);
template<> ::TransCatSerial::RoutesSecIndexData* Arena::CreateMaybeMessage<::TransCatSerial::RoutesSecIndexData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TransCatSerial {

// ===================================================================

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit constexpr Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Edge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // uint32 to = 2;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t from_;
  uint32_t to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Edges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Edges) */ {
 public:
  inline Edges() : Edges(nullptr) {}
  ~Edges() override;
  explicit constexpr Edges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edges(const Edges& from);
  Edges(Edges&& from) noexcept
    : Edges() {
    *this = ::std::move(from);
  }

  inline Edges& operator=(const Edges& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edges& operator=(Edges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edges& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edges* internal_default_instance() {
    return reinterpret_cast<const Edges*>(
               &_Edges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Edges& a, Edges& b) {
    a.Swap(&b);
  }
  inline void Swap(Edges* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edges>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edges& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Edges& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edges* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Edges";
  }
  protected:
  explicit Edges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
  };
  // repeated .TransCatSerial.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::TransCatSerial::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Edge >*
      mutable_edges();
  private:
  const ::TransCatSerial::Edge& _internal_edges(int index) const;
  ::TransCatSerial::Edge* _internal_add_edges();
  public:
  const ::TransCatSerial::Edge& edges(int index) const;
  ::TransCatSerial::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Edge >&
      edges() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.Edges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Edge > edges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  ~IncidenceList() override;
  explicit constexpr IncidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncidenceList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdFieldNumber = 1,
  };
  // repeated uint32 edge_id = 1;
  int edge_id_size() const;
  private:
  int _internal_edge_id_size() const;
  public:
  void clear_edge_id();
  private:
  uint32_t _internal_edge_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_edge_id() const;
  void _internal_add_edge_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_edge_id();
  public:
  uint32_t edge_id(int index) const;
  void set_edge_id(int index, uint32_t value);
  void add_edge_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      edge_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_edge_id();

  // @@protoc_insertion_point(class_scope:TransCatSerial.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > edge_id_;
  mutable std::atomic<int> _edge_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class IncidenceLists final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.IncidenceLists) */ {
 public:
  inline IncidenceLists() : IncidenceLists(nullptr) {}
  ~IncidenceLists() override;
  explicit constexpr IncidenceLists(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceLists(const IncidenceLists& from);
  IncidenceLists(IncidenceLists&& from) noexcept
    : IncidenceLists() {
    *this = ::std::move(from);
  }

  inline IncidenceLists& operator=(const IncidenceLists& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceLists& operator=(IncidenceLists&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceLists& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceLists* internal_default_instance() {
    return reinterpret_cast<const IncidenceLists*>(
               &_IncidenceLists_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncidenceLists& a, IncidenceLists& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceLists* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceLists* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceLists* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceLists>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceLists& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncidenceLists& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceLists* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.IncidenceLists";
  }
  protected:
  explicit IncidenceLists(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncidenceListFieldNumber = 1,
  };
  // repeated .TransCatSerial.IncidenceList incidence_list = 1;
  int incidence_list_size() const;
  private:
  int _internal_incidence_list_size() const;
  public:
  void clear_incidence_list();
  ::TransCatSerial::IncidenceList* mutable_incidence_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::IncidenceList >*
      mutable_incidence_list();
  private:
  const ::TransCatSerial::IncidenceList& _internal_incidence_list(int index) const;
  ::TransCatSerial::IncidenceList* _internal_add_incidence_list();
  public:
  const ::TransCatSerial::IncidenceList& incidence_list(int index) const;
  ::TransCatSerial::IncidenceList* add_incidence_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::IncidenceList >&
      incidence_list() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.IncidenceLists)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::IncidenceList > incidence_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RouteData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.RouteData) */ {
 public:
  inline RouteData() : RouteData(nullptr) {}
  ~RouteData() override;
  explicit constexpr RouteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteData(const RouteData& from);
  RouteData(RouteData&& from) noexcept
    : RouteData() {
    *this = ::std::move(from);
  }

  inline RouteData& operator=(const RouteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteData& operator=(RouteData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteData* internal_default_instance() {
    return reinterpret_cast<const RouteData*>(
               &_RouteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteData& a, RouteData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RouteData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.RouteData";
  }
  protected:
  explicit RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 2,
    kHasValueFieldNumber = 1,
    kHasPrevEdgeValueFieldNumber = 3,
    kPrevEdgeFieldNumber = 4,
  };
  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // bool has_value = 1;
  void clear_has_value();
  bool has_value() const;
  void set_has_value(bool value);
  private:
  bool _internal_has_value() const;
  void _internal_set_has_value(bool value);
  public:

  // bool has_prev_edge_value = 3;
  void clear_has_prev_edge_value();
  bool has_prev_edge_value() const;
  void set_has_prev_edge_value(bool value);
  private:
  bool _internal_has_prev_edge_value() const;
  void _internal_set_has_prev_edge_value(bool value);
  public:

  // uint32 prev_edge = 4;
  void clear_prev_edge();
  uint32_t prev_edge() const;
  void set_prev_edge(uint32_t value);
  private:
  uint32_t _internal_prev_edge() const;
  void _internal_set_prev_edge(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.RouteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_;
  bool has_value_;
  bool has_prev_edge_value_;
  uint32_t prev_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RoutesSecIndexData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.RoutesSecIndexData) */ {
 public:
  inline RoutesSecIndexData() : RoutesSecIndexData(nullptr) {}
  ~RoutesSecIndexData() override;
  explicit constexpr RoutesSecIndexData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesSecIndexData(const RoutesSecIndexData& from);
  RoutesSecIndexData(RoutesSecIndexData&& from) noexcept
    : RoutesSecIndexData() {
    *this = ::std::move(from);
  }

  inline RoutesSecIndexData& operator=(const RoutesSecIndexData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesSecIndexData& operator=(RoutesSecIndexData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesSecIndexData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesSecIndexData* internal_default_instance() {
    return reinterpret_cast<const RoutesSecIndexData*>(
               &_RoutesSecIndexData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoutesSecIndexData& a, RoutesSecIndexData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesSecIndexData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesSecIndexData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesSecIndexData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesSecIndexData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesSecIndexData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutesSecIndexData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesSecIndexData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.RoutesSecIndexData";
  }
  protected:
  explicit RoutesSecIndexData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecRoutesDataFieldNumber = 1,
  };
  // repeated .TransCatSerial.RouteData sec_routes_data = 1;
  int sec_routes_data_size() const;
  private:
  int _internal_sec_routes_data_size() const;
  public:
  void clear_sec_routes_data();
  ::TransCatSerial::RouteData* mutable_sec_routes_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RouteData >*
      mutable_sec_routes_data();
  private:
  const ::TransCatSerial::RouteData& _internal_sec_routes_data(int index) const;
  ::TransCatSerial::RouteData* _internal_add_sec_routes_data();
  public:
  const ::TransCatSerial::RouteData& sec_routes_data(int index) const;
  ::TransCatSerial::RouteData* add_sec_routes_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RouteData >&
      sec_routes_data() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.RoutesSecIndexData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RouteData > sec_routes_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RoutesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.RoutesData) */ {
 public:
  inline RoutesData() : RoutesData(nullptr) {}
  ~RoutesData() override;
  explicit constexpr RoutesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesData(const RoutesData& from);
  RoutesData(RoutesData&& from) noexcept
    : RoutesData() {
    *this = ::std::move(from);
  }

  inline RoutesData& operator=(const RoutesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesData& operator=(RoutesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesData* internal_default_instance() {
    return reinterpret_cast<const RoutesData*>(
               &_RoutesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoutesData& a, RoutesData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutesData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.RoutesData";
  }
  protected:
  explicit RoutesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstRoutesDataFieldNumber = 1,
  };
  // repeated .TransCatSerial.RoutesSecIndexData first_routes_data = 1;
  int first_routes_data_size() const;
  private:
  int _internal_first_routes_data_size() const;
  public:
  void clear_first_routes_data();
  ::TransCatSerial::RoutesSecIndexData* mutable_first_routes_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RoutesSecIndexData >*
      mutable_first_routes_data();
  private:
  const ::TransCatSerial::RoutesSecIndexData& _internal_first_routes_data(int index) const;
  ::TransCatSerial::RoutesSecIndexData* _internal_add_first_routes_data();
  public:
  const ::TransCatSerial::RoutesSecIndexData& first_routes_data(int index) const;
  ::TransCatSerial::RoutesSecIndexData* add_first_routes_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RoutesSecIndexData >&
      first_routes_data() const;

  // @@protoc_insertion_point(class_scope:TransCatSerial.RoutesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RoutesSecIndexData > first_routes_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  from_ = 0u;
}
inline uint32_t Edge::_internal_from() const {
  return from_;
}
inline uint32_t Edge::from() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(uint32_t value) {
  
  from_ = value;
}
inline void Edge::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  to_ = 0u;
}
inline uint32_t Edge::_internal_to() const {
  return to_;
}
inline uint32_t Edge::to() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(uint32_t value) {
  
  to_ = value;
}
inline void Edge::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Edge.weight)
}

// -------------------------------------------------------------------

// Edges

// repeated .TransCatSerial.Edge edges = 1;
inline int Edges::_internal_edges_size() const {
  return edges_.size();
}
inline int Edges::edges_size() const {
  return _internal_edges_size();
}
inline void Edges::clear_edges() {
  edges_.Clear();
}
inline ::TransCatSerial::Edge* Edges::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.Edges.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Edge >*
Edges::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.Edges.edges)
  return &edges_;
}
inline const ::TransCatSerial::Edge& Edges::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::TransCatSerial::Edge& Edges::edges(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Edges.edges)
  return _internal_edges(index);
}
inline ::TransCatSerial::Edge* Edges::_internal_add_edges() {
  return edges_.Add();
}
inline ::TransCatSerial::Edge* Edges::add_edges() {
  ::TransCatSerial::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:TransCatSerial.Edges.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::Edge >&
Edges::edges() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.Edges.edges)
  return edges_;
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 edge_id = 1;
inline int IncidenceList::_internal_edge_id_size() const {
  return edge_id_.size();
}
inline int IncidenceList::edge_id_size() const {
  return _internal_edge_id_size();
}
inline void IncidenceList::clear_edge_id() {
  edge_id_.Clear();
}
inline uint32_t IncidenceList::_internal_edge_id(int index) const {
  return edge_id_.Get(index);
}
inline uint32_t IncidenceList::edge_id(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.IncidenceList.edge_id)
  return _internal_edge_id(index);
}
inline void IncidenceList::set_edge_id(int index, uint32_t value) {
  edge_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TransCatSerial.IncidenceList.edge_id)
}
inline void IncidenceList::_internal_add_edge_id(uint32_t value) {
  edge_id_.Add(value);
}
inline void IncidenceList::add_edge_id(uint32_t value) {
  _internal_add_edge_id(value);
  // @@protoc_insertion_point(field_add:TransCatSerial.IncidenceList.edge_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::_internal_edge_id() const {
  return edge_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::edge_id() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.IncidenceList.edge_id)
  return _internal_edge_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::_internal_mutable_edge_id() {
  return &edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::mutable_edge_id() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.IncidenceList.edge_id)
  return _internal_mutable_edge_id();
}

// -------------------------------------------------------------------

// IncidenceLists

// repeated .TransCatSerial.IncidenceList incidence_list = 1;
inline int IncidenceLists::_internal_incidence_list_size() const {
  return incidence_list_.size();
}
inline int IncidenceLists::incidence_list_size() const {
  return _internal_incidence_list_size();
}
inline void IncidenceLists::clear_incidence_list() {
  incidence_list_.Clear();
}
inline ::TransCatSerial::IncidenceList* IncidenceLists::mutable_incidence_list(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.IncidenceLists.incidence_list)
  return incidence_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::IncidenceList >*
IncidenceLists::mutable_incidence_list() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.IncidenceLists.incidence_list)
  return &incidence_list_;
}
inline const ::TransCatSerial::IncidenceList& IncidenceLists::_internal_incidence_list(int index) const {
  return incidence_list_.Get(index);
}
inline const ::TransCatSerial::IncidenceList& IncidenceLists::incidence_list(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.IncidenceLists.incidence_list)
  return _internal_incidence_list(index);
}
inline ::TransCatSerial::IncidenceList* IncidenceLists::_internal_add_incidence_list() {
  return incidence_list_.Add();
}
inline ::TransCatSerial::IncidenceList* IncidenceLists::add_incidence_list() {
  ::TransCatSerial::IncidenceList* _add = _internal_add_incidence_list();
  // @@protoc_insertion_point(field_add:TransCatSerial.IncidenceLists.incidence_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::IncidenceList >&
IncidenceLists::incidence_list() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.IncidenceLists.incidence_list)
  return incidence_list_;
}

// -------------------------------------------------------------------

// RouteData

// bool has_value = 1;
inline void RouteData::clear_has_value() {
  has_value_ = false;
}
inline bool RouteData::_internal_has_value() const {
  return has_value_;
}
inline bool RouteData::has_value() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.RouteData.has_value)
  return _internal_has_value();
}
inline void RouteData::_internal_set_has_value(bool value) {
  
  has_value_ = value;
}
inline void RouteData::set_has_value(bool value) {
  _internal_set_has_value(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.RouteData.has_value)
}

// double weight = 2;
inline void RouteData::clear_weight() {
  weight_ = 0;
}
inline double RouteData::_internal_weight() const {
  return weight_;
}
inline double RouteData::weight() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.RouteData.weight)
  return _internal_weight();
}
inline void RouteData::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void RouteData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.RouteData.weight)
}

// bool has_prev_edge_value = 3;
inline void RouteData::clear_has_prev_edge_value() {
  has_prev_edge_value_ = false;
}
inline bool RouteData::_internal_has_prev_edge_value() const {
  return has_prev_edge_value_;
}
inline bool RouteData::has_prev_edge_value() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.RouteData.has_prev_edge_value)
  return _internal_has_prev_edge_value();
}
inline void RouteData::_internal_set_has_prev_edge_value(bool value) {
  
  has_prev_edge_value_ = value;
}
inline void RouteData::set_has_prev_edge_value(bool value) {
  _internal_set_has_prev_edge_value(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.RouteData.has_prev_edge_value)
}

// uint32 prev_edge = 4;
inline void RouteData::clear_prev_edge() {
  prev_edge_ = 0u;
}
inline uint32_t RouteData::_internal_prev_edge() const {
  return prev_edge_;
}
inline uint32_t RouteData::prev_edge() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.RouteData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteData::_internal_set_prev_edge(uint32_t value) {
  
  prev_edge_ = value;
}
inline void RouteData::set_prev_edge(uint32_t value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.RouteData.prev_edge)
}

// -------------------------------------------------------------------

// RoutesSecIndexData

// repeated .TransCatSerial.RouteData sec_routes_data = 1;
inline int RoutesSecIndexData::_internal_sec_routes_data_size() const {
  return sec_routes_data_.size();
}
inline int RoutesSecIndexData::sec_routes_data_size() const {
  return _internal_sec_routes_data_size();
}
inline void RoutesSecIndexData::clear_sec_routes_data() {
  sec_routes_data_.Clear();
}
inline ::TransCatSerial::RouteData* RoutesSecIndexData::mutable_sec_routes_data(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.RoutesSecIndexData.sec_routes_data)
  return sec_routes_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RouteData >*
RoutesSecIndexData::mutable_sec_routes_data() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.RoutesSecIndexData.sec_routes_data)
  return &sec_routes_data_;
}
inline const ::TransCatSerial::RouteData& RoutesSecIndexData::_internal_sec_routes_data(int index) const {
  return sec_routes_data_.Get(index);
}
inline const ::TransCatSerial::RouteData& RoutesSecIndexData::sec_routes_data(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.RoutesSecIndexData.sec_routes_data)
  return _internal_sec_routes_data(index);
}
inline ::TransCatSerial::RouteData* RoutesSecIndexData::_internal_add_sec_routes_data() {
  return sec_routes_data_.Add();
}
inline ::TransCatSerial::RouteData* RoutesSecIndexData::add_sec_routes_data() {
  ::TransCatSerial::RouteData* _add = _internal_add_sec_routes_data();
  // @@protoc_insertion_point(field_add:TransCatSerial.RoutesSecIndexData.sec_routes_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RouteData >&
RoutesSecIndexData::sec_routes_data() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.RoutesSecIndexData.sec_routes_data)
  return sec_routes_data_;
}

// -------------------------------------------------------------------

// RoutesData

// repeated .TransCatSerial.RoutesSecIndexData first_routes_data = 1;
inline int RoutesData::_internal_first_routes_data_size() const {
  return first_routes_data_.size();
}
inline int RoutesData::first_routes_data_size() const {
  return _internal_first_routes_data_size();
}
inline void RoutesData::clear_first_routes_data() {
  first_routes_data_.Clear();
}
inline ::TransCatSerial::RoutesSecIndexData* RoutesData::mutable_first_routes_data(int index) {
  // @@protoc_insertion_point(field_mutable:TransCatSerial.RoutesData.first_routes_data)
  return first_routes_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RoutesSecIndexData >*
RoutesData::mutable_first_routes_data() {
  // @@protoc_insertion_point(field_mutable_list:TransCatSerial.RoutesData.first_routes_data)
  return &first_routes_data_;
}
inline const ::TransCatSerial::RoutesSecIndexData& RoutesData::_internal_first_routes_data(int index) const {
  return first_routes_data_.Get(index);
}
inline const ::TransCatSerial::RoutesSecIndexData& RoutesData::first_routes_data(int index) const {
  // @@protoc_insertion_point(field_get:TransCatSerial.RoutesData.first_routes_data)
  return _internal_first_routes_data(index);
}
inline ::TransCatSerial::RoutesSecIndexData* RoutesData::_internal_add_first_routes_data() {
  return first_routes_data_.Add();
}
inline ::TransCatSerial::RoutesSecIndexData* RoutesData::add_first_routes_data() {
  ::TransCatSerial::RoutesSecIndexData* _add = _internal_add_first_routes_data();
  // @@protoc_insertion_point(field_add:TransCatSerial.RoutesData.first_routes_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TransCatSerial::RoutesSecIndexData >&
RoutesData::first_routes_data() const {
  // @@protoc_insertion_point(field_list:TransCatSerial.RoutesData.first_routes_data)
  return first_routes_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TransCatSerial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
