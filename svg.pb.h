// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_svg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_svg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_svg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svg_2eproto;
namespace TransCatSerial {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace TransCatSerial
PROTOBUF_NAMESPACE_OPEN
template<> ::TransCatSerial::Color* Arena::CreateMaybeMessage<::TransCatSerial::Color>(Arena*);
template<> ::TransCatSerial::Point* Arena::CreateMaybeMessage<::TransCatSerial::Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TransCatSerial {

enum Color_ColorEncodingType : int {
  Color_ColorEncodingType_COLORTYPE_UNDEFINED = 0,
  Color_ColorEncodingType_COLORTYPE_STRING = 1,
  Color_ColorEncodingType_COLORTYPE_RGB = 2,
  Color_ColorEncodingType_COLORTYPE_RGBA = 3,
  Color_ColorEncodingType_Color_ColorEncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Color_ColorEncodingType_Color_ColorEncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Color_ColorEncodingType_IsValid(int value);
constexpr Color_ColorEncodingType Color_ColorEncodingType_ColorEncodingType_MIN = Color_ColorEncodingType_COLORTYPE_UNDEFINED;
constexpr Color_ColorEncodingType Color_ColorEncodingType_ColorEncodingType_MAX = Color_ColorEncodingType_COLORTYPE_RGBA;
constexpr int Color_ColorEncodingType_ColorEncodingType_ARRAYSIZE = Color_ColorEncodingType_ColorEncodingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_ColorEncodingType_descriptor();
template<typename T>
inline const std::string& Color_ColorEncodingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color_ColorEncodingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_ColorEncodingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_ColorEncodingType_descriptor(), enum_t_value);
}
inline bool Color_ColorEncodingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color_ColorEncodingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color_ColorEncodingType>(
    Color_ColorEncodingType_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransCatSerial.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit constexpr Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Color& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransCatSerial.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Color_ColorEncodingType ColorEncodingType;
  static constexpr ColorEncodingType COLORTYPE_UNDEFINED =
    Color_ColorEncodingType_COLORTYPE_UNDEFINED;
  static constexpr ColorEncodingType COLORTYPE_STRING =
    Color_ColorEncodingType_COLORTYPE_STRING;
  static constexpr ColorEncodingType COLORTYPE_RGB =
    Color_ColorEncodingType_COLORTYPE_RGB;
  static constexpr ColorEncodingType COLORTYPE_RGBA =
    Color_ColorEncodingType_COLORTYPE_RGBA;
  static inline bool ColorEncodingType_IsValid(int value) {
    return Color_ColorEncodingType_IsValid(value);
  }
  static constexpr ColorEncodingType ColorEncodingType_MIN =
    Color_ColorEncodingType_ColorEncodingType_MIN;
  static constexpr ColorEncodingType ColorEncodingType_MAX =
    Color_ColorEncodingType_ColorEncodingType_MAX;
  static constexpr int ColorEncodingType_ARRAYSIZE =
    Color_ColorEncodingType_ColorEncodingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ColorEncodingType_descriptor() {
    return Color_ColorEncodingType_descriptor();
  }
  template<typename T>
  static inline const std::string& ColorEncodingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ColorEncodingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ColorEncodingType_Name.");
    return Color_ColorEncodingType_Name(enum_t_value);
  }
  static inline bool ColorEncodingType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ColorEncodingType* value) {
    return Color_ColorEncodingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kColorNameFieldNumber = 6,
    kEncodingTypeFieldNumber = 1,
    kRedFieldNumber = 2,
    kGreenFieldNumber = 3,
    kBlueFieldNumber = 4,
    kOpacityFieldNumber = 5,
  };
  // bytes color_name = 6;
  void clear_color_name();
  const std::string& color_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_name();
  PROTOBUF_NODISCARD std::string* release_color_name();
  void set_allocated_color_name(std::string* color_name);
  private:
  const std::string& _internal_color_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_name(const std::string& value);
  std::string* _internal_mutable_color_name();
  public:

  // .TransCatSerial.Color.ColorEncodingType encoding_type = 1;
  void clear_encoding_type();
  ::TransCatSerial::Color_ColorEncodingType encoding_type() const;
  void set_encoding_type(::TransCatSerial::Color_ColorEncodingType value);
  private:
  ::TransCatSerial::Color_ColorEncodingType _internal_encoding_type() const;
  void _internal_set_encoding_type(::TransCatSerial::Color_ColorEncodingType value);
  public:

  // uint32 red = 2;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 3;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // uint32 blue = 4;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // double opacity = 5;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // @@protoc_insertion_point(class_scope:TransCatSerial.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_name_;
  int encoding_type_;
  uint32_t red_;
  uint32_t green_;
  uint32_t blue_;
  double opacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_svg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Point.y)
}

// -------------------------------------------------------------------

// Color

// .TransCatSerial.Color.ColorEncodingType encoding_type = 1;
inline void Color::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::TransCatSerial::Color_ColorEncodingType Color::_internal_encoding_type() const {
  return static_cast< ::TransCatSerial::Color_ColorEncodingType >(encoding_type_);
}
inline ::TransCatSerial::Color_ColorEncodingType Color::encoding_type() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Color.encoding_type)
  return _internal_encoding_type();
}
inline void Color::_internal_set_encoding_type(::TransCatSerial::Color_ColorEncodingType value) {
  
  encoding_type_ = value;
}
inline void Color::set_encoding_type(::TransCatSerial::Color_ColorEncodingType value) {
  _internal_set_encoding_type(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Color.encoding_type)
}

// uint32 red = 2;
inline void Color::clear_red() {
  red_ = 0u;
}
inline uint32_t Color::_internal_red() const {
  return red_;
}
inline uint32_t Color::red() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Color.red)
  return _internal_red();
}
inline void Color::_internal_set_red(uint32_t value) {
  
  red_ = value;
}
inline void Color::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Color.red)
}

// uint32 green = 3;
inline void Color::clear_green() {
  green_ = 0u;
}
inline uint32_t Color::_internal_green() const {
  return green_;
}
inline uint32_t Color::green() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Color.green)
  return _internal_green();
}
inline void Color::_internal_set_green(uint32_t value) {
  
  green_ = value;
}
inline void Color::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Color.green)
}

// uint32 blue = 4;
inline void Color::clear_blue() {
  blue_ = 0u;
}
inline uint32_t Color::_internal_blue() const {
  return blue_;
}
inline uint32_t Color::blue() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Color.blue)
  return _internal_blue();
}
inline void Color::_internal_set_blue(uint32_t value) {
  
  blue_ = value;
}
inline void Color::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Color.blue)
}

// double opacity = 5;
inline void Color::clear_opacity() {
  opacity_ = 0;
}
inline double Color::_internal_opacity() const {
  return opacity_;
}
inline double Color::opacity() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Color.opacity)
  return _internal_opacity();
}
inline void Color::_internal_set_opacity(double value) {
  
  opacity_ = value;
}
inline void Color::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:TransCatSerial.Color.opacity)
}

// bytes color_name = 6;
inline void Color::clear_color_name() {
  color_name_.ClearToEmpty();
}
inline const std::string& Color::color_name() const {
  // @@protoc_insertion_point(field_get:TransCatSerial.Color.color_name)
  return _internal_color_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Color::set_color_name(ArgT0&& arg0, ArgT... args) {
 
 color_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TransCatSerial.Color.color_name)
}
inline std::string* Color::mutable_color_name() {
  std::string* _s = _internal_mutable_color_name();
  // @@protoc_insertion_point(field_mutable:TransCatSerial.Color.color_name)
  return _s;
}
inline const std::string& Color::_internal_color_name() const {
  return color_name_.Get();
}
inline void Color::_internal_set_color_name(const std::string& value) {
  
  color_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_color_name() {
  
  return color_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Color::release_color_name() {
  // @@protoc_insertion_point(field_release:TransCatSerial.Color.color_name)
  return color_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Color::set_allocated_color_name(std::string* color_name) {
  if (color_name != nullptr) {
    
  } else {
    
  }
  color_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TransCatSerial.Color.color_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TransCatSerial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TransCatSerial::Color_ColorEncodingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TransCatSerial::Color_ColorEncodingType>() {
  return ::TransCatSerial::Color_ColorEncodingType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
